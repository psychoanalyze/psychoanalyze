name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:

  quality:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
        cache: 'poetry'

    - name: Set up the project
      run: |
        pip install poetry safety
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: poetry install

    - name: Check if the documentation builds correctly
      run: poetry run mkdocs build

    - name: Check the code quality
      run: poetry run flake8

    - name: Check if the code is correctly typed
      run: poetry run mypy

    - name: Check for vulnerabilities in dependencies
      run: poetry run bandit .

  tests:

    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, 3.10]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up the cache
      uses: actions/cache@v3
      env:
        cache-name: cache-python-packages
      with:
        path: .venv
        key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ env.cache-name }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.python-version }}-
          ${{ matrix.os }}-

    - name: Set up the project
      run: |
        pip install poetry
        poetry config virtualenvs.in-project true
        make setup

    - name: Run the test suite
      run: make test