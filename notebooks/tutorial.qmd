---
title: PsychoAnalyze Tutorial
author: "Ty C Schlichenmeyer"
date: '20223-07-20'
toc: true
number-sections: true
jupyter: python3
format:
    html:
        theme: spacelab
---

# PsychoAnalyze Python Tutorial / Demo

## Ordinary Least Squares Logistic Regression on Trial Data

### Data Schema

The simplest psychophysical experiments consist of a series of trials measuring a binary-encoded response to an intensity-graded stimulus.

Use the `trials` module to load data from a CSV or Parquet file into a Pandas DataFrame.

```{python}
from psychoanalyze.data import trials

example_trials = trials.load("tutorial_trials.csv")
example_trials
```
::: {.column-margin}
```{python}
example_trials.info()
```
:::

### Logistic Regression in a Yes/No Experiment

By designing the experiment such that the recorded response is a binary outcome, researchers may use logistic regression to model the relationship between the stimulus and the response; logistic regression is a generalized linear model that is appropriate for a series of binary (Bernoulli) trials.

Let's examine the 1-dimensional case of the logistic function, which may represent a basic psychometric function $\psi(x)$, using some tools from `psychoanalyze`.  $\psi(x)$ models the probability of a "yes" response to a stimulus of intensity *x*:

```{python}
#| code-fold: true

from psychoanalyze.data.blocks import standard_logistic
from psychoanalyze import plot
import pandas as pd
import plotly.express as px
import plotly.io as pio
from dash import Dash, dcc, html, callback, Input, Output
import dash_bootstrap_components as dbc

pio.renderers.default = "plotly_mimetype+notebook_connected"

app = Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB])

app.layout = dbc.Container(
    dbc.Row(
        [
            dbc.Col(
            html.Button(
                "Standard Logistic", 
                id="standard-logistic-button", 
                className="mb-3 btn btn-primary"
            ),
            ),
            dbc.Col(
                [

                    html.H5("Location"),
                    dcc.Slider(
                        min=-4.0,
                        max=4.0,
                        step=0.01,
                        value=0.0,
                        included=False,
                        tooltip={"always_visible": True, "placement": "bottom"},
                        updatemode="drag",
                        marks={
                            -4.0: "-4.0",
                            -2.0: "-2.0",
                            0.0: "0.0",
                            2.0: "2.0",
                            4.0: "4.0",
                        },
                        id="location-slider",
                    ),
                ]
            ),
            dbc.Col(
                [

                    html.H5("Scale"),
                    dcc.Slider(
                        min=-4.0, 
                        max=4.0, 
                        value=1.0,
                        step=0.01,
                        included=False,
                        marks={
                            -4.0: "-4.0",
                            -2.0: "-2.0",
                            0.0: "0.0",
                            2.0: "2.0",
                            4.0: "4.0",
                        },
                        tooltip={"always_visible": True, "placement": "bottom"},
                        updatemode="drag",
                        id="scale-slider",
                    ),            
                ]
            ),
        dcc.Graph(
            figure=plot.logistic(location=0.0, scale=1.0),
            id="psi-plot",
        ),
    ]
)
)

@callback(
    Output("psi-plot", "figure"),
    Input("location-slider", "value"),
    Input("scale-slider", "value"),
)
def update_psi_plot(location, scale):
    # return plot.logistic(location=location, scale=scale)
    return px.scatter()

if __name__ == "__main__":
    app.run(debug=True)
```
$$
\psi(x) = \frac{1}{1 + e^{-\frac{x - \mu}{\sigma}}}
$$

::: {.column-margin}
::: {.callout-note}
## Sanity check
$f(0) = \frac{1}{1 + e^{-0}} = \frac{1}{1+1} = \frac{1}{2}$
:::
:::

Once upon a time, you may have learned that you can "normalize" or "standardize" linear data sets by subtracting the mean and dividing by the standard deviation. We see this transformation make an appearance in the non-standard parameterization of the logistic function:
Let's label some variables and perform some simple substitutions to examine a *non-standard* parameterization of the logistic function, where \mu is a *location* parameter and \sigma is a *scale* parameter:
