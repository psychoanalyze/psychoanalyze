---
title: "Differential Sensitivity"
format:
    html:
        code-fold: true
jupyter: python3
---

## Weber's Law

$$ \Delta \phi = c \phi $$ 

$$ \frac{\Delta \phi}{\phi} = c $$

```{python}

#| label: fig-weber-1
#| fig-subcap:
#|  - "JND vs Stimulus Level"
#|  - "Weber Fraction vs Stimulus Level"
#| layout-ncol: 2
#| column: page

import plotly.express as px
import psychoanalyze as pa
import pandas as pd
import numpy as np


c = pd.Series([.1, .2], name="c")

φ = pd.Series([10.0, 15.0, 20.0, 25.0, 30.0], name="φ")

Δφ = pd.DataFrame(np.outer(φ, c), columns=["c=.1", "c=.2"], index=φ)

weber1 = pd.Series(Δφ["c=.1"] / φ.values, name="Δφ/φ", index=φ)
weber2 = pd.Series(Δφ["c=.2"] / φ.values, name="Δφ/φ", index=φ)

px.scatter(Δφ.reset_index(), x="φ", y=["c=.1", "c=.2"], labels={"value": "Δφ", "variable": "c"},template="plotly_white").show()

px.scatter(pd.concat([weber1, weber2], keys=["c=.1", "c=.2"], names=["c"]).reset_index(), x="φ", y="Δφ/φ",color='c',template="plotly_white").show()

```

## Predict JNDs w/ Weber's Law

```{python}

Δφ = 2.4
φ = 10.0

c = Δφ / φ

φ_predict = pd.Series([3.0, 5.0, 10.0, 20.0, 30.0])
Δφ_predict = φ_predict * c
predicted = pd.DataFrame(
    {
        "Δφ": Δφ_predict,
    },
    index=pd.Index(φ_predict, name="φ")
)
observed = pd.DataFrame(
    {
        "Δφ": [1.0, 1.4, 2.4, 4.4, 6.4],
    }
    ,index=pd.Index(φ_predict, name="φ")
)
df = pd.concat(
    [predicted, observed], keys=["predicted", "observed"], names=["source"]
)
px.scatter(df.reset_index(), x="φ", y="Δφ", color="source", template="plotly_white").show()


```

## Calculate Weber Fraction from data

```{python}
weber_fraction = observed["Δφ"] / observed.index.values
weber_fraction.index = φ_predict
px.scatter(weber_fraction, template="plotly_white").show()

```

## Weber's Law w/intercept parameter

```{python}

a = 2.0

observed["Δφ/(φ-a)"] = observed["Δφ"] / (observed.index.values + a)

px.scatter(observed, x=observed.index.values, y="Δφ/(φ-a)", template='plotly_white').show()


```

## Fechner's JND scaling

```{python}

def fechner_method(c, φ_0):
    φ_i = φ_0
    φ = [φ_0]
    for _ in range(10): 
        φ_i += φ_i * c
        φ.append(φ_i)
    return φ


```

```{python}

#| layout-ncol: 2
#| column: page

c = .1

φ = 5.0
φ_0 = [5.0]

for i in range(10):
    φ += φ * c
    φ_0.append(φ)


c = .2

φ = 5.0
φ_1 = [5.0]

for i in range(10):
    φ += φ * c
    φ_1.append(φ)


n_jnd = [0,1,2,3,4,5,6,7,8,9,10]

df = pd.concat([pd.Series(φ_0, name="φ", index=pd.Index(n_jnd, name="Ψ")), pd.Series(φ_1, name="φ", index=pd.Index(n_jnd, name='Ψ'))], keys=['c=.1', 'c=.2'], names=['c'])
df = df.reset_index()
px.scatter(df, x="φ", y='Ψ', color='c', template="plotly_white").show()

```

## Log scaling

```{python}

df['log(φ)'] = np.log(df['φ'])

px.scatter(df, x='log(φ)', y='Ψ', color='c', trendline='ols', template="plotly_white").show()



```
