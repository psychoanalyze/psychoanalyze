{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#introduction","title":"Introduction","text":"<p>PsychoAnalyze was developed to support research for the Moran Lab at Washington University in St. Louis. It is a multi-purpose data platform to assist researchers analyzing data from psychophysical experiments, providing prepackaged libraries for helpful data transformation methods, model-fitting routines, and data visualization features specific to this research domain.</p> <p>New to psychophysics?</p> <p>Psychophysics is a branch of study within behavioral psychology and neuroscience that provides an experimental and analytical framework for the broad purpose of quantifying the relationship between physical stimuli and perceptual experience. For an excellent review of the history and impact of psychophysics, check out the following review published in Neuroscience by J.C.A. Read: The place of human psychophysics in modern neuroscience.</p>"},{"location":"#dashboard","title":"Dashboard","text":"<p>For a high-level view of what you can do with PsychoAnalyze, try out the interactive dashboard at https://psychoanalyze.io.</p> <p>For guidance, check out our brief dashboard guide, or just start clicking around to see what happens!</p> <p>Try...</p> <ul> <li>Simulating data by adjusting model simulation parameters.</li> <li> <p>Downloading results in various file formats:</p> <ul> <li>Tabular data: <code>.csv</code>, <code>.parquet</code>, <code>.json</code>, <code>.duckdb</code></li> <li>Figures: <code>.png</code>, <code>.svg</code>, <code>.pdf</code></li> </ul> </li> <li> <p>Uploading your own dataset or our tutorial dataset according to the specified schema and observe/download the model fits.</p> </li> </ul>"},{"location":"#notebook-tutorial","title":"Notebook Tutorial","text":"<p>For a more hands-on experience with PsychoAnalyze, enjoy our notebook tutorial. Consider submitting a notebook of your own to our gallery!</p>"},{"location":"#python-package","title":"Python Package","text":"<p>For custom applications, you can use <code>psychoanalyze</code> as a Python package (available on PyPI) to develop your own analysis scripts or apps. You'll want to check out our Python API documentation and our test documentation.</p>"},{"location":"#install-in-a-python-environment","title":"Install in a Python environment","text":"PoetryPip <pre><code>poetry add psychoanalyze\n</code></pre> <pre><code>pip install psychoanalyze\n</code></pre>"},{"location":"#want-to-contribute-to-psychoanalyze","title":"Want to contribute to PsychoAnalyze?","text":"<p>Check out our contributing guide, or see what's going on in Discussions!\ud83d\udca1</p>"},{"location":"CONTRIBUTING/","title":"Contribute","text":"<p>PsychoAnalyze welcomes contributions, feature requests and bug reports from everyone!</p> <p>If you are a researcher seeking to use PsychoAnalyze in your own research context, we'd love to hear from you!</p> <ul> <li> <p>\u2709\ufe0f E-mail</p> </li> <li> <p>\ud83d\udde3\ufe0f Discussions - Start an \ud83d\udca1Idea</p> </li> <li> <p>\ud83d\udcbb Feature Request</p> </li> </ul> <p>Otherwise, examine the roadmap to see what we have planned!</p>"},{"location":"CONTRIBUTING/#feature-requests","title":"Feature Requests","text":"<p>PsychoAnalyze aims to be community-driven software. If you would like to use PsychoAnalyze in your own research context, please let us know what features you need to make that possible. Examine our roadmap to see what we already have planned, and open an issue using the \"Feature Request\" template to let us know what you need.</p>"},{"location":"CONTRIBUTING/#bug-reports","title":"Bug Reports","text":"<p>If you encounter a bug, please open an issue using the \"Bug Report\" template.</p>"},{"location":"CONTRIBUTING/#local-development-environment","title":"Local Development Environment","text":"<p>Tip</p> <p>Windows users will likely have more success following this guide if they use Windows Subsystem for Linux as their command line interface. More thorough \"pure\"-Windows documentation is forthcoming.</p>"},{"location":"CONTRIBUTING/#option-1-dev-container","title":"Option 1: Dev Container","text":"<p>The recommended way to set up a development environment is to use utilize our Dev Container configuration to build a containerized environment. You may run a Dev Container in the cloud using GitHub Codespaces, or locally using Docker Desktop on OSX and Windows.</p>"},{"location":"CONTRIBUTING/#github-codespaces","title":"GitHub Codespaces","text":"<p>GitHub Codespaces is a cloud-based development environment that allows you to develop PsychoAnalyze without installing any software on your local machine. To use GitHub Codespaces, click the \"Code\" button at the top of the repository and select \"Open with Codespaces\". This will open a new Codespace in your browser. Once the Codespace is ready, you will be able to open a terminal and run one of our base commands.</p>"},{"location":"CONTRIBUTING/#local-dev-container","title":"Local Dev Container","text":"<p>Required: Docker Desktop</p> <ol> <li>Clone the repository</li> <li>Open the repository in VS Code</li> <li>Install the Dev Containers extension</li> <li>Use Ctrl+Shift+P to open the command palette and select \"Remote-Containers: Reopen in Container\" (or, accept the prompt from VS Code to do so).</li> </ol>"},{"location":"CONTRIBUTING/#option-2-install-dependencies-manually","title":"Option 2: Install dependencies manually","text":"<p>PsychoAnalyze uses</p> <ul> <li>Python 3.11</li> <li>Poetry for package and virtual environment management</li> <li>Pre-commit for automated code formatting, linting, type checking, and automated testing as part of a pre-commit workflow.</li> </ul> <p>All other dependencies are defined in <code>pyproject.toml</code> and will be installed automatically in your active virtual environment when you run <code>poetry install</code>.</p> <p>Tip</p> <p>Python and Poetry can be installed and managed with <code>asdf</code>, an awesome environment management tool.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#psychoanalyze","title":"<code>psychoanalyze</code>","text":"<p>Top-level package for <code>psychoanalyze</code>.</p> <p>Modules:</p> <ul> <li><code>plot</code>: Global plot settings and generic plot utilities.</li> <li><code>sigmoids</code>: Implementations of psychometric sigmoid functions.</li> </ul> <p>Subpackages:</p> <ul> <li><code>data</code>: Submodules in <code>psychoanalyze.data</code> contain data manipulation and transformation functions that relate to a level in the data hierarchy.</li> <li><code>analysis</code>: Submodules in <code>psychoanalyze.analysis</code> contain data manipulation and transformation functions, often corresponding to a level in the data hierarchy.</li> </ul>"},{"location":"api/#psychoanalyze.main","title":"<code>main</code>","text":"<p>PsychoAnalyze command line interface.</p>"},{"location":"api/#psychoanalyze.main.main","title":"<code>main(command='version')</code>","text":"<p>Main commands.</p> Source code in <code>psychoanalyze/main.py</code> <pre><code>def main(command: str = \"version\") -&gt; None:\n\"\"\"Main commands.\"\"\"\nif command == \"version\":\nConsole().print(importlib.metadata.version(\"psychoanalyze\"))\n</code></pre>"},{"location":"api/#psychoanalyze.params","title":"<code>params</code>","text":"<p>Psychometric function parameter conversions.</p>"},{"location":"api/#psychoanalyze.params.intercept_to_location","title":"<code>intercept_to_location(intercept, scale)</code>","text":"<p>Convert intercept to location.</p> Source code in <code>psychoanalyze/params.py</code> <pre><code>def intercept_to_location(intercept: float, scale: float) -&gt; float:\n\"\"\"Convert intercept to location.\"\"\"\nreturn -intercept * scale\n</code></pre>"},{"location":"api/#psychoanalyze.params.location_to_intercept","title":"<code>location_to_intercept(location, scale)</code>","text":"<p>Convert location to intercept.</p> Source code in <code>psychoanalyze/params.py</code> <pre><code>def location_to_intercept(location: float, scale: float) -&gt; float:\n\"\"\"Convert location to intercept.\"\"\"\nreturn -location / scale\n</code></pre>"},{"location":"api/#psychoanalyze.params.slope_to_scale","title":"<code>slope_to_scale(slope)</code>","text":"<p>Convert slope to scale.</p> Source code in <code>psychoanalyze/params.py</code> <pre><code>def slope_to_scale(slope: float) -&gt; float:\n\"\"\"Convert slope to scale.\"\"\"\nreturn 1 / slope\n</code></pre>"},{"location":"api/#psychoanalyze.params.scale_to_slope","title":"<code>scale_to_slope(scale)</code>","text":"<p>Convert scale to slope.</p> Source code in <code>psychoanalyze/params.py</code> <pre><code>def scale_to_slope(scale: float) -&gt; float:\n\"\"\"Convert scale to slope.\"\"\"\nreturn 1 / scale\n</code></pre>"},{"location":"api/#psychoanalyze.plot","title":"<code>plot</code>","text":"<p>Global plot settings and generic plot utilities.</p>"},{"location":"api/#psychoanalyze.plot.standard_logistic","title":"<code>standard_logistic()</code>","text":"<p>Plot a standard logistic function.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def standard_logistic() -&gt; go.Scatter:\n\"\"\"Plot a standard logistic function.\"\"\"\nreturn px.line(\nblocks.standard_logistic(),\ny=\"f(x)\",\ntemplate=\"plotly_white\",\ntitle=\"$f(x) = \\\\frac{1}{1 + e^{-x}}$\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.logistic","title":"<code>logistic(location, scale)</code>","text":"<p>Plot a logistic function.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def logistic(location: float, scale: float) -&gt; go.Scatter:\n\"\"\"Plot a logistic function.\"\"\"\nreturn px.line(\nblocks.logistic(location, scale),\ny=\"\u03a8(x)\",\ntemplate=\"plotly_white\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids","title":"<code>sigmoids</code>","text":"<p>Sigmoid functions used in the psychometric function.</p>"},{"location":"api/#psychoanalyze.sigmoids.weibull","title":"<code>weibull(x, alpha, beta)</code>","text":"<p>Calculate psi using Weibull function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def weibull(\nx: np.ndarray[Any, np.dtype[np.floating[Any]]],\nalpha: float,\nbeta: float,\n) -&gt; float:\n\"\"\"Calculate psi using Weibull function.\"\"\"\nreturn 1 - np.exp(-((x / alpha) ** beta))\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids.gumbel","title":"<code>gumbel(x, alpha, beta)</code>","text":"<p>Calculate psi using gumbel function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def gumbel(x: np.ndarray[Any, np.dtype[Any]], alpha: float, beta: float) -&gt; float:\n\"\"\"Calculate psi using gumbel function.\"\"\"\nreturn 1 - np.exp(-(10 ** (beta * (x - alpha))))\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids.quick","title":"<code>quick(x, alpha, beta)</code>","text":"<p>Calculate psi using quick function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def quick(x: float, alpha: float, beta: float) -&gt; float:\n\"\"\"Calculate psi using quick function.\"\"\"\nreturn 1 - 2 ** (-((x / alpha) ** beta))\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids.log_quick","title":"<code>log_quick(x, alpha, beta)</code>","text":"<p>Calculate psi using log_quick function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def log_quick(x: float, alpha: float, beta: float) -&gt; float:\n\"\"\"Calculate psi using log_quick function.\"\"\"\nreturn 1 - 2 ** (-(10 ** (beta * (x - alpha))))\n</code></pre>"},{"location":"api/#psychoanalyze.data","title":"<code>data</code>","text":"<p>Data modules and general-purpose data transformation utilities.</p> <p>Submodules:</p> <ul> <li><code>psychoanalyze.data.blocks</code></li> <li><code>psychoanalyze.data.points</code></li> <li><code>psychoanalyze.data.trials</code></li> <li><code>psychoanalyze.data.sessions</code></li> <li><code>psychoanalyze.data.subjects</code></li> <li><code>psychoanalyze.data.types</code></li> </ul>"},{"location":"api/#psychoanalyze.data.points","title":"<code>points</code>","text":"<p>Utilities for points-level data.</p> <p>Points correspond to the aggregate measures of method-of-constant-stimuli experiments at each stimulus level measured. For example, a block that samples 8 stimulus intensity levels would have 8 corresponding points.</p>"},{"location":"api/#psychoanalyze.data.points.from_trials","title":"<code>from_trials(trials)</code>","text":"<p>Aggregate point-level measures from trial data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>@check_io(trials=types.trials, out=types.points)\ndef from_trials(trials: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Aggregate point-level measures from trial data.\"\"\"\npoints = trials.groupby([\"Block\", \"Intensity\"])[\"Result\"].agg([\"count\", \"sum\"])\npoints = points.rename(columns={\"count\": \"n trials\", \"sum\": \"Hits\"})\npoints[\"Hit Rate\"] = points[\"Hits\"] / points[\"n trials\"]\npoints[\"logit(Hit Rate)\"] = logit(points[\"Hit Rate\"])\nreturn points.reset_index()\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.load","title":"<code>load(data_path)</code>","text":"<p>Load points data from csv.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>@check_output(types.points)\ndef load(data_path: Path) -&gt; pd.DataFrame:\n\"\"\"Load points data from csv.\"\"\"\ntrials = pa_trials.load(data_path)\nreturn from_trials(trials)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.dimension","title":"<code>dimension(points)</code>","text":"<p>Determine modulated dimension from point-level data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def dimension(points: pd.DataFrame) -&gt; str:\n\"\"\"Determine modulated dimension from point-level data.\"\"\"\namp1, width1 = (\npoints.index.get_level_values(param) for param in [\"Amp1\", \"Width1\"]\n)\nif amp1.nunique() &gt; 1 and width1.nunique() == 1:\nreturn \"Amp\"\nif width1.nunique() &gt; 1 and amp1.nunique() == 1:\nreturn \"Width\"\nif width1.nunique() &gt; 1 and amp1.nunique() &gt; 1:\nreturn \"Both\"\nreturn \"Neither\"\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.prep_fit","title":"<code>prep_fit(points, dimension='Amp1')</code>","text":"<p>Transform points data for numpy-related fitting procedures.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def prep_fit(points: pd.DataFrame, dimension: str = \"Amp1\") -&gt; dict:\n\"\"\"Transform points data for numpy-related fitting procedures.\"\"\"\npoints = points.reset_index()\nreturn {\n\"X\": len(points),\n\"x\": points[f\"{dimension}\"].to_numpy(),\n\"N\": points[\"n\"].to_numpy(),\n\"hits\": points[\"Hits\"].to_numpy(),\n}\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.model","title":"<code>model()</code>","text":"<p>Instantiate Stan binomial regression model.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def model() -&gt; stan.CmdStanModel:\n\"\"\"Instantiate Stan binomial regression model.\"\"\"\nreturn stan.CmdStanModel(stan_file=\"models/binomial_regression.stan\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.hits","title":"<code>hits(n, params)</code>","text":"<p>Sample list of n hits from a list of intensity values.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def hits(\nn: pd.Series,\nparams: dict[str, float],\n) -&gt; pd.Series:\n\"\"\"Sample list of n hits from a list of intensity values.\"\"\"\np = logistic.cdf(n.index.to_numpy(), params[\"Threshold\"], params[\"Slope\"])\npsi = params[\"Guess Rate\"] + (1.0 - params[\"Guess Rate\"] - params[\"Lapse Rate\"]) * p\nreturn pd.Series(\nnp.random.default_rng().binomial(\nn,\npsi,\nlen(n),\n),\nindex=n.index,\nname=\"Hits\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.generate","title":"<code>generate(n_trials, options, params)</code>","text":"<p>Generate points-level data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def generate(\nn_trials: int,\noptions: pd.Index,\nparams: dict[str, float],\n) -&gt; pd.DataFrame:\n\"\"\"Generate points-level data.\"\"\"\nn = generate_n(n_trials, options)\n_hits = hits(\nn,\nparams,\n)\npoints = pd.concat([n, _hits], axis=1)\n_hit_rate = hit_rate(points)\nlogit_hit_rate = pd.Series(\nlogit(_hit_rate),\nname=\"logit(Hit Rate)\",\nindex=n.index,\n)\nreturn pd.concat([points, _hit_rate, logit_hit_rate], axis=1)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.generate_point","title":"<code>generate_point(n, p)</code>","text":"<p>Sample n hits from n trials and probability p from binomial dist.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def generate_point(n: int, p: float) -&gt; int:\n\"\"\"Sample n hits from n trials and probability p from binomial dist.\"\"\"\nreturn np.random.default_rng().binomial(n, p)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.datatable","title":"<code>datatable(data)</code>","text":"<p>Convert dataframe to Dash DataTable-friendly format.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def datatable(data: pd.DataFrame) -&gt; dash_table.DataTable:\n\"\"\"Convert dataframe to Dash DataTable-friendly format.\"\"\"\nreturn dash_table.DataTable(\ndata.reset_index()[[\"Amp1\", \"Hit Rate\", \"n\"]].to_dict(\"records\"),\ncolumns=[\n{\n\"id\": \"Amp1\",\n\"name\": \"Amp1\",\n\"type\": \"numeric\",\n\"format\": dash_table.Format.Format(\nprecision=2,\nscheme=dash_table.Format.Scheme.fixed,\n),\n},\n{\n\"id\": \"Hit Rate\",\n\"name\": \"Hit Rate\",\n\"type\": \"numeric\",\n\"format\": dash_table.Format.Format(\nprecision=2,\nscheme=dash_table.Format.Scheme.fixed,\n),\n},\n{\n\"id\": \"n\",\n\"name\": \"n\",\n\"type\": \"numeric\",\n},\n],\nid=\"experiment-psych-table\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.from_store","title":"<code>from_store(store_data)</code>","text":"<p>Get points-level measures from trials-level data store.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def from_store(store_data: str) -&gt; pd.DataFrame:\n\"\"\"Get points-level measures from trials-level data store.\"\"\"\ntrials = pa_trials.from_store(store_data)\nreturn from_trials(trials)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.combine_plots","title":"<code>combine_plots(fig1, fig2)</code>","text":"<p>Combine two points-level plots. Possible duplicate.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def combine_plots(fig1: go.Figure, fig2: go.Figure) -&gt; go.Figure:\n\"\"\"Combine two points-level plots. Possible duplicate.\"\"\"\nreturn go.Figure(data=fig1.data + fig2.data)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.n","title":"<code>n(trials)</code>","text":"<p>Count trials at each point.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def n(trials: pd.Series) -&gt; pd.Series:\n\"\"\"Count trials at each point.\"\"\"\nreturn pd.Series(trials.value_counts(), name=\"n\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.generate_n","title":"<code>generate_n(n_trials, options)</code>","text":"<p>Simulate how many trials were performed per intensity level.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def generate_n(n_trials: int, options: pd.Index) -&gt; pd.Series:\n\"\"\"Simulate how many trials were performed per intensity level.\"\"\"\nreturn n(pa_trials.generate_trial_index(n_trials, options))\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.to_block","title":"<code>to_block(points)</code>","text":"<p>Aggregate to block-level measures from points-level data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def to_block(points: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Aggregate to block-level measures from points-level data.\"\"\"\nreturn points.groupby(level=\"Block\").sum()\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.psi","title":"<code>psi(x, params)</code>","text":"<p>Calculate psi for an array of intensity levels x.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def psi(\nx: pd.Index,\nparams: dict[str, float],\n) -&gt; pd.Series:\n\"\"\"Calculate psi for an array of intensity levels x.\"\"\"\nreturn pd.Series(\nparams[\"gamma\"]\n+ (1 - params[\"gamma\"] - params[\"lambda\"])\n* expit(params[\"x_0\"] + params[\"k\"] * x),\nindex=x,\nname=\"p(x)\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.plot","title":"<code>plot(points, y)</code>","text":"<p>Plot the psychometric function.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def plot(points: pd.DataFrame, y: str) -&gt; go.Figure:\n\"\"\"Plot the psychometric function.\"\"\"\nreturn px.scatter(\npoints.reset_index(),\nx=\"Intensity\",\ny=y,\nsize=\"n\",\ncolor=\"Block\",\ntemplate=\"plotly_white\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.hit_rate","title":"<code>hit_rate(df)</code>","text":"<p>Calculate hit rate from hits and number of trials.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def hit_rate(df: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate hit rate from hits and number of trials.\"\"\"\nreturn pd.Series(df[\"Hits\"] / df[\"n\"], name=\"Hit Rate\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.transform","title":"<code>transform(hit_rate, y)</code>","text":"<p>Logit transform hit rate.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def transform(hit_rate: float, y: str) -&gt; float:\n\"\"\"Logit transform hit rate.\"\"\"\nreturn logit(hit_rate) if y == \"alpha\" else hit_rate\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.generate_index","title":"<code>generate_index(n_levels, x_range)</code>","text":"<p>Generate evenly-spaced values along the modulated stimulus dimension.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def generate_index(n_levels: int, x_range: list[float]) -&gt; pd.Index:\n\"\"\"Generate evenly-spaced values along the modulated stimulus dimension.\"\"\"\nmin_x = x_range[0]\nmax_x = x_range[1]\nreturn pd.Index(np.linspace(min_x, max_x, n_levels), name=\"Intensity\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.stimulus","title":"<code>stimulus</code>","text":"<p>Constants for dimension labels.</p>"},{"location":"api/#psychoanalyze.data.subjects","title":"<code>subjects</code>","text":"<p>Data transformation functions for subject-level data.</p>"},{"location":"api/#psychoanalyze.data.subjects.load","title":"<code>load(data_path)</code>","text":"<p>Load subject data from csv.</p> Source code in <code>psychoanalyze/data/subjects.py</code> <pre><code>def load(data_path: Path) -&gt; pd.DataFrame:\n\"\"\"Load subject data from csv.\"\"\"\nreturn pd.read_csv(\ndata_path / \"subjects.csv\",\nindex_col=\"Monkey\",\nparse_dates=[\"Surgery Date\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.subjects.generate_letter_names","title":"<code>generate_letter_names(n_subjects)</code>","text":"<p>Generate a list of dummy subjects using capital letters in alph. order.</p> Source code in <code>psychoanalyze/data/subjects.py</code> <pre><code>def generate_letter_names(n_subjects: int) -&gt; list[str]:\n\"\"\"Generate a list of dummy subjects using capital letters in alph. order.\"\"\"\nreturn list(\"ABCDEFG\"[:n_subjects])\n</code></pre>"},{"location":"api/#psychoanalyze.data.subjects.generate_trials","title":"<code>generate_trials(n_trials, model_params, n_days, n_subjects)</code>","text":"<p>Generate trial-level data, including subject-level info.</p> Source code in <code>psychoanalyze/data/subjects.py</code> <pre><code>def generate_trials(\nn_trials: int,\nmodel_params: dict[str, float],\nn_days: int,\nn_subjects: int,\n) -&gt; pd.DataFrame:\n\"\"\"Generate trial-level data, including subject-level info.\"\"\"\nreturn pd.concat(\n{\nsubj: sessions.generate_trials(n_trials, model_params, n_days)\nfor subj in string.ascii_uppercase[:n_subjects]\n},\nnames=[\"Subject\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks","title":"<code>blocks</code>","text":"<p>Block-level data utilities.</p> <p>Blocks are the most analytically significant objects in the PsychoAnalyze data hierarchy. They represent a specific set of experimental conditions and generally correspond to a single fit of the psychometric function.</p>"},{"location":"api/#psychoanalyze.data.blocks.generate","title":"<code>generate(n_trials_per_level, x_min, x_max, n_levels)</code>","text":"<p>Generate block-level data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def generate(\nn_trials_per_level: int,\nx_min: float,\nx_max: float,\nn_levels: int,\n) -&gt; pd.DataFrame:\n\"\"\"Generate block-level data.\"\"\"\nindex = pd.Index(np.linspace(x_min, x_max, n_levels), name=\"x\")\nn = [n_trials_per_level] * len(index)\np = scipy_logistic.cdf(index)\nreturn pd.DataFrame(\n{\"n\": n, \"Hits\": np.random.default_rng().binomial(n, p)},\nindex=index,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.dimensions","title":"<code>dimensions(_points, dims)</code>","text":"<p>Calculate dimensions for multiple blocks.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def dimensions(_points: pd.DataFrame, dims: list[str]) -&gt; pd.Series:\n\"\"\"Calculate dimensions for multiple blocks.\"\"\"\nreturn _points.groupby(\n[dim for dim in list(_points.index.names) if dim not in dims],\n).apply(points.dimension)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.plot_fits","title":"<code>plot_fits(blocks)</code>","text":"<p>Plot fits.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def plot_fits(blocks: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot fits.\"\"\"\nx = np.linspace(-3, 3, 100)\ny = expit(x)\nreturn px.line(blocks.reset_index(), x=x, y=y)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.load","title":"<code>load(data_path)</code>","text":"<p>Load block data from csv.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def load(data_path: Path) -&gt; pd.DataFrame:\n\"\"\"Load block data from csv.\"\"\"\nfull_path = data_path / \"blocks.csv\"\nchannel_config = [\"Active Channels\", \"Return Channels\"]\nblocks = pd.read_csv(full_path / \"blocks.csv\", parse_dates=[\"Date\"]).set_index(\nsessions.dims + stimulus.ref_dims + channel_config,\n)\nblocks[\"Block\"] = days(blocks, subjects.load(full_path))\nreturn blocks\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.days","title":"<code>days(blocks, intervention_dates)</code>","text":"<p>Calculate days for block-level data. Possible duplicate.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def days(blocks: pd.DataFrame, intervention_dates: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate days for block-level data. Possible duplicate.\"\"\"\nblocks = blocks.join(intervention_dates, on=\"Subject\")\ndays = pd.Series(\nblocks.index.get_level_values(\"Date\") - blocks[\"Surgery Date\"],\n).dt.days\ndays.name = \"Days\"\nreturn days\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.n_trials","title":"<code>n_trials(trials)</code>","text":"<p>Calculate n trials for each block.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def n_trials(trials: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate n trials for each block.\"\"\"\nsession_cols = [\"Subject\", \"Date\"]\nref_stim_cols = [\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"]\nchannel_config = [\"Active Channels\", \"Return Channels\"]\nreturn trials.groupby(session_cols + ref_stim_cols + channel_config)[\n\"Result\"\n].count()\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.is_valid","title":"<code>is_valid(block)</code>","text":"<p>Determine if curve data is valid.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def is_valid(block: pd.DataFrame) -&gt; bool:\n\"\"\"Determine if curve data is valid.\"\"\"\nreturn any(block[\"Hit Rate\"] &gt; 0.5) &amp; any(block[\"Hit Rate\"] &lt; 0.5)  # noqa: PLR2004\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.subject_counts","title":"<code>subject_counts(data)</code>","text":"<p>Determine how many subjects are in the data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def subject_counts(data: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Determine how many subjects are in the data.\"\"\"\nsummary = (\ndata.index.get_level_values(\"Subject\").value_counts().rename(\"Total Blocks\")\n)\nsummary.index.name = \"Subject\"\nreturn summary\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.fit","title":"<code>fit(trials)</code>","text":"<p>Fit logistic regression to trial data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def fit(trials: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Fit logistic regression to trial data.\"\"\"\nfit = LogisticRegression().fit(\ntrials[[\"Intensity\"]],\ntrials[\"Result\"],\n)\nintercept = fit.intercept_[0]\nslope = fit.coef_[0][0]\nreturn pd.Series({\"intercept\": intercept, \"slope\": slope})\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.generate_trials","title":"<code>generate_trials(n_trials, model_params)</code>","text":"<p>Generate trials for block-level context.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def generate_trials(n_trials: int, model_params: dict[str, float]) -&gt; pd.DataFrame:\n\"\"\"Generate trials for block-level context.\"\"\"\nreturn trials.moc_sample(n_trials, model_params)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.from_points","title":"<code>from_points(points)</code>","text":"<p>Aggregate block measures from points data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def from_points(points: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Aggregate block measures from points data.\"\"\"\nreturn points.groupby(\"BlockID\")[[\"n\"]].sum()\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.plot_thresholds","title":"<code>plot_thresholds(blocks)</code>","text":"<p>Plot longitudinal threshold data.</p> <p>Parameters:</p> Name Type Description Default <code>blocks</code> <code>pd.DataFrame</code> <p>Block-level DataFrame.</p> required <p>Returns:</p> Type Description <code>go.Figure</code> <p>A plotly Graph Object.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def plot_thresholds(blocks: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot longitudinal threshold data.\n    Args:\n        blocks: Block-level DataFrame.\n    Returns:\n        A plotly Graph Object.\n    \"\"\"\nreturn px.scatter(\ntransform_errors(blocks),\nx=\"Block\",\ny=\"50%\",\nerror_y=\"err+\",\nerror_y_minus=\"err-\",\ncolor=\"Subject\",\ncolor_discrete_map={\"U\": \"#e41a1c\", \"Y\": \"#377eb8\", \"Z\": \"#4daf4a\"},\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.transform_errors","title":"<code>transform_errors(fit)</code>","text":"<p>Transform errors from absolute to relative.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def transform_errors(fit: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Transform errors from absolute to relative.\"\"\"\nfit[\"err+\"] = fit[\"95%\"] - fit[\"50%\"]\nfit[\"err-\"] = fit[\"50%\"] - fit[\"5%\"]\nreturn fit.drop(columns=[\"95%\", \"5%\"])\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.reshape_fit_results","title":"<code>reshape_fit_results(fits, x, y)</code>","text":"<p>Reshape fit params for plotting.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def reshape_fit_results(fits: pd.DataFrame, x: pd.Index, y: str) -&gt; pd.DataFrame:\n\"\"\"Reshape fit params for plotting.\"\"\"\nrows = [f\"{y}[{i}]\" for i in range(1, len(x) + 1)]\nparam_fits = fits.loc[\nrows,  # row eg 'p[1]:p[8]'\n[\"5%\", \"50%\", \"95%\"],  # col\n]\nparam_fits = transform_errors(param_fits)\nparam_fits = param_fits.rename(columns={\"50%\": y})\nparam_fits.index = x\nreturn param_fits\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.standard_logistic","title":"<code>standard_logistic()</code>","text":"<p>Generate points for a line trace of a standard logistic function.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def standard_logistic() -&gt; pd.Series:\n\"\"\"Generate points for a line trace of a standard logistic function.\"\"\"\nx = pd.Index(np.linspace(-3, 3, 100), name=\"x\")\ny = expit(x)\nreturn pd.Series(y, index=x, name=\"f(x)\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.logistic","title":"<code>logistic(location, scale)</code>","text":"<p>Generate points for a line trace of a logistic function.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def logistic(location: float, scale: float) -&gt; pd.Series:\n\"\"\"Generate points for a line trace of a logistic function.\"\"\"\nx_min = (location - 4) * scale\nx_max = (location + 4) * scale\nx = pd.Index(np.linspace(x_min, x_max, 100), name=\"Intensity\")\ny = expit((x - location) / scale)\nreturn pd.Series(y, index=x, name=\"\u03a8(x)\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials","title":"<code>trials</code>","text":"<p>Functions for data manipulations at the trial level.</p>"},{"location":"api/#psychoanalyze.data.trials.generate_trial_index","title":"<code>generate_trial_index(n_trials, options)</code>","text":"<p>Generate n trials (no outcomes).</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def generate_trial_index(n_trials: int, options: pd.Index) -&gt; pd.Series:\n\"\"\"Generate n trials (no outcomes).\"\"\"\nreturn pd.Series(\n[random.choice(options) for _ in range(n_trials)],\nname=\"Intensity\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.generate","title":"<code>generate(n_trials, options, params)</code>","text":"<p>Generate n trials with outcomes.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>@check_output(types.trials)\ndef generate(\nn_trials: int,\noptions: pd.Index,\nparams: dict[str, float],\n) -&gt; pd.DataFrame:\n\"\"\"Generate n trials with outcomes.\"\"\"\nx = generate_trial_index(n_trials, options)\nreturn pd.DataFrame(\n{\n\"Result\": [int(random.random() &lt;= psi(x_val, params)) for x_val in x],\n\"Intensity\": x,\n},\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.load","title":"<code>load(data_path)</code>","text":"<p>Load trials data from csv.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def load(data_path: Path) -&gt; pd.DataFrame:\n\"\"\"Load trials data from csv.\"\"\"\nreturn types.trials.validate(\npd.read_csv(\ndata_path,\ndtype={\n\"Result\": int,\n\"Intensity\": float,\n\"Block\": int,\n},\n),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.from_store","title":"<code>from_store(store_data)</code>","text":"<p>Convert JSON-formatted string to DataFrame.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def from_store(store_data: str) -&gt; pd.DataFrame:\n\"\"\"Convert JSON-formatted string to DataFrame.\"\"\"\ndf_dict = json.loads(store_data)\nindex_names = df_dict.pop(\"index_names\")\nindex = pd.MultiIndex.from_tuples(df_dict[\"index\"])\ntrials = pd.DataFrame({\"Result\": df_dict[\"data\"][0]}, index=index)\ntrials.index.names = index_names\nreturn types.trials.validate(trials)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.to_store","title":"<code>to_store(trials)</code>","text":"<p>Convert data to a JSON-formatted string for dcc.Store.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def to_store(trials: pd.DataFrame) -&gt; str:\n\"\"\"Convert data to a JSON-formatted string for dcc.Store.\"\"\"\ndata_dict = trials.to_dict(orient=\"split\")\ndata_dict[\"index_names\"] = types.points_index_levels\nreturn json.dumps(data_dict)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.normalize","title":"<code>normalize(trials)</code>","text":"<p>Normalize denormalized trial data.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def normalize(trials: pd.DataFrame) -&gt; dict[str, pd.DataFrame]:\n\"\"\"Normalize denormalized trial data.\"\"\"\nreturn {\n\"Session\": trials[[\"Monkey\", \"Block\"]].drop_duplicates(),\n\"Reference Stimulus\": trials[[\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"]],\n\"Channel Config\": trials[[\"Active Channels\", \"Return Channels\"]],\n\"Test Stimulus\": trials[[\"Amp1\", \"Width1\", \"Freq1\", \"Dur1\"]],\n}\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.result","title":"<code>result(p)</code>","text":"<p>Return a trial result given a probability p.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def result(p: float) -&gt; bool:\n\"\"\"Return a trial result given a probability p.\"\"\"\nreturn random.random() &lt; p\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.results","title":"<code>results(n, p_x)</code>","text":"<p>Return a list of trial results in dict format.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def results(n: int, p_x: pd.Series) -&gt; list[Trial]:\n\"\"\"Return a list of trial results in dict format.\"\"\"\nresults = []\nfor _ in range(n):\nstimulus_magnitude = random.choice(p_x.index.to_list())\n_result = result(p_x[stimulus_magnitude])\nresults.append(\nTrial(\n{\n\"Stimulus Magnitude\": stimulus_magnitude,\n\"Result\": _result,\n},\n),\n)\nreturn results\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.labels","title":"<code>labels(results)</code>","text":"<p>Convert a list of outcome codes to their labels.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def labels(results: list[int]) -&gt; list[str]:\n\"\"\"Convert a list of outcome codes to their labels.\"\"\"\nreturn [codes[result] for result in results]\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.psi","title":"<code>psi(intensity, params)</code>","text":"<p>Calculate the value of the psychometric function for a given intensity.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def psi(intensity: float, params: dict[str, float]) -&gt; float:\n\"\"\"Calculate the value of the psychometric function for a given intensity.\"\"\"\ngamma = params[\"Guess Rate\"]\nlambda_ = params[\"Lapse Rate\"]\nk = params[\"Slope\"]\nx_0 = params[\"Threshold\"]\nreturn gamma + (1 - gamma - lambda_) * (1 / (1 + np.exp(-k * (intensity - x_0))))\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.moc_sample","title":"<code>moc_sample(n_trials, model_params)</code>","text":"<p>Sample results from a method-of-constant-stimuli experiment.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def moc_sample(n_trials: int, model_params: dict[str, float]) -&gt; pd.DataFrame:\n\"\"\"Sample results from a method-of-constant-stimuli experiment.\"\"\"\nx_0 = model_params[\"x_0\"]\nk = model_params[\"k\"]\nintensity_choices = np.linspace(x_0 - 4 / k, x_0 + 4 / k, 7)\nintensities = [float(random.choice(intensity_choices)) for _ in range(n_trials)]\nintensity_index = pd.Index(intensities, name=\"Intensity\")\nresults = [\nint(random.random() &lt;= psi(intensity, model_params))\nfor intensity in intensities\n]\nreturn pd.DataFrame(\n{\"Result\": pd.Series(results, dtype=int)},\nindex=intensity_index,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.fit","title":"<code>fit(trials)</code>","text":"<p>Fit trial data using logistic regression.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def fit(trials: pd.DataFrame) -&gt; dict[str, float]:\n\"\"\"Fit trial data using logistic regression.\"\"\"\nfits = LogisticRegression().fit(trials[[\"Intensity\"]], trials[\"Result\"])\nreturn {\"Threshold\": -fits.intercept_[0], \"Slope\": fits.coef_[0][0]}\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions","title":"<code>sessions</code>","text":"<p>Utilities for session-level data.</p> <p>Sessions represent a single day of experiments performed by a subject. It may contain several blocks.</p>"},{"location":"api/#psychoanalyze.data.sessions.generate","title":"<code>generate(n)</code>","text":"<p>Generate session-level data.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def generate(n: int) -&gt; list[int]:\n\"\"\"Generate session-level data.\"\"\"\nreturn list(range(n))\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.cache_results","title":"<code>cache_results(sessions)</code>","text":"<p>Save session data to csv.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def cache_results(sessions: pd.DataFrame) -&gt; None:\n\"\"\"Save session data to csv.\"\"\"\nsessions.to_csv(\"data/normalized/sessions.csv\", index=False)\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.from_trials_csv","title":"<code>from_trials_csv(path)</code>","text":"<p>Aggregate to session level from trial-level data.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def from_trials_csv(path: Path) -&gt; pd.DataFrame:\n\"\"\"Aggregate to session level from trial-level data.\"\"\"\nreturn pd.read_csv(path)[[\"Monkey\", \"Date\"]].drop_duplicates()\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.day_marks","title":"<code>day_marks(subjects, sessions, monkey)</code>","text":"<p>Calculate days since surgery date for a given subject.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def day_marks(subjects: pd.DataFrame, sessions: pd.DataFrame, monkey: str) -&gt; dict:\n\"\"\"Calculate days since surgery date for a given subject.\"\"\"\nsurgery_date = pd.to_datetime(\nsubjects.loc[subjects[\"Monkey\"] == monkey, \"Surgery Date\"],\n)[0]\nsessions = sessions[sessions[\"Monkey\"] == \"U\"]\nsessions[\"Days\"] = (pd.to_datetime(sessions[\"Date\"]) - surgery_date).dt.days\nreturn {sessions.loc[i, \"Days\"]: sessions.loc[i, \"Date\"] for i in sessions.index}\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.days","title":"<code>days(sessions, subjects)</code>","text":"<p>Calculate days since surgery date.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def days(sessions: pd.DataFrame, subjects: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate days since surgery date.\"\"\"\nsessions_subjects = sessions.join(subjects, on=\"Monkey\")\nreturn (\npd.to_datetime(sessions_subjects.index.get_level_values(\"Date\"))\n- sessions_subjects[\"Surgery Date\"]\n).dt.days\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.n_trials","title":"<code>n_trials(trials)</code>","text":"<p>Count trials per session.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def n_trials(trials: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Count trials per session.\"\"\"\nreturn trials.groupby([\"Monkey\", \"Date\"])[[\"Result\"]].count()\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.load","title":"<code>load(data_dir)</code>","text":"<p>Load session-level data from csv.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def load(data_dir: Path) -&gt; pd.DataFrame:\n\"\"\"Load session-level data from csv.\"\"\"\nreturn pd.read_csv(data_dir / \"sessions.csv\", index_col=[\"Monkey\", \"Date\"])\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.generate_trials","title":"<code>generate_trials(n_trials, model_params, n_days)</code>","text":"<p>Generate trial-level data for session-level context.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def generate_trials(\nn_trials: int,\nmodel_params: dict[str, float],\nn_days: int,\n) -&gt; pd.DataFrame:\n\"\"\"Generate trial-level data for session-level context.\"\"\"\nreturn pd.concat(\n{day: blocks.generate_trials(n_trials, model_params) for day in range(n_days)},\nnames=[\"Block\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.types","title":"<code>types</code>","text":"<p>Pandera schemas for psychoanalyze dataframes.</p> <p>Contains data table schemas of the hierarchical entities described above.</p>"},{"location":"api/#psychoanalyze.data.types.PsiAnimation","title":"<code>PsiAnimation</code>","text":"<p>             Bases: <code>DataFrameModel</code></p> <p>Pandera type for psychometric function animation dataset.</p> Source code in <code>psychoanalyze/data/types.py</code> <pre><code>class PsiAnimation(DataFrameModel):\n\"\"\"Pandera type for psychometric function animation dataset.\"\"\"\ntrial_id: typing.Series[int]\nintensity: typing.Series[float]\nhit_rate: typing.Series[float]\n</code></pre>"},{"location":"api/#psychoanalyze.data.types.PsiAnimationFrame","title":"<code>PsiAnimationFrame</code>","text":"<p>             Bases: <code>DataFrameModel</code></p> <p>Pandera type for a single psychometric function animation frame.</p> Source code in <code>psychoanalyze/data/types.py</code> <pre><code>class PsiAnimationFrame(DataFrameModel):\n\"\"\"Pandera type for a single psychometric function animation frame.\"\"\"\nintensity: typing.Series[float]\nhit_rate: typing.Series[float]\n</code></pre>"},{"location":"api/#psychoanalyze.data.types.Blocks","title":"<code>Blocks</code>","text":"<p>             Bases: <code>DataFrameModel</code></p> <p>Blocks type for Pandera.</p> Source code in <code>psychoanalyze/data/types.py</code> <pre><code>class Blocks(DataFrameModel):\n\"\"\"Blocks type for Pandera.\"\"\"\nslope: float\nthreshold: float\n</code></pre>"},{"location":"api/#psychoanalyze.data.types.Points","title":"<code>Points</code>","text":"<p>             Bases: <code>DataFrameModel</code></p> <p>Pandera data type.</p> Source code in <code>psychoanalyze/data/types.py</code> <pre><code>class Points(DataFrameModel):\n\"\"\"Pandera data type.\"\"\"\nn: int\nHits: int\nblock_id: int\n</code></pre>"},{"location":"api/#psychoanalyze.data.types.Trials","title":"<code>Trials</code>","text":"<p>             Bases: <code>DataFrameModel</code></p> <p>Trials data type for pandera + mypy type checking.</p> Source code in <code>psychoanalyze/data/types.py</code> <pre><code>class Trials(DataFrameModel):\n\"\"\"Trials data type for pandera + mypy type checking.\"\"\"\nresult: int\nintensity: typing.Index[float]\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard","title":"<code>dashboard</code>","text":"<p>The PsychoAnalyze dashboard is powered by Plotly/Dash.</p> <ul> <li> <p><code>app.py</code> is the main file which contains the infrastructure for the Dash app. and callback functions in their entirety.</p> </li> <li> <p><code>layout.py</code> specifies the layout of the HTML and Dash components that comprise the app.</p> </li> <li> <p><code>components.py</code> contains more complex and/or reusable components used in the app.</p> </li> </ul>"},{"location":"api/#psychoanalyze.dashboard.app","title":"<code>app</code>","text":"<p>Main Dash app file.</p> <p>Contains callbacks.</p>"},{"location":"api/#psychoanalyze.dashboard.app.update_data","title":"<code>update_data(contents, filename, n_param, param)</code>","text":"<p>Update points table.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"trials-store\", \"data\"),\nOutput({\"type\": \"x-param\", \"name\": \"min\"}, \"value\"),\nOutput({\"type\": \"x-param\", \"name\": \"max\"}, \"value\"),\nInput(\"upload\", \"contents\"),\nState(\"upload\", \"filename\"),\nInput({\"type\": \"n-param\", \"name\": ALL}, \"value\"),\nInput({\"type\": \"param\", \"name\": ALL}, \"value\"),\n)\ndef update_data(\ncontents: str,\nfilename: str,\nn_param: list[int],\nparam: list[float],\n) -&gt; tuple[Records, float, float]:\n\"\"\"Update points table.\"\"\"\nn_param_values = [\n\"n_levels\",\n\"n_trials\",\n\"n_blocks\",\n]\nn_params = pd.Series(n_param, index=n_param_values)\nparams = pd.Series(param, index=[\"x_0\", \"k\", \"gamma\", \"lambda\"])\nparams[\"intercept\"] = -params[\"x_0\"] / params[\"k\"]\nparams[\"slope\"] = 1 / params[\"k\"]\nmin_x = (logit(0.01) - params[\"intercept\"]) / params[\"slope\"]\nmax_x = (logit(0.99) - params[\"intercept\"]) / params[\"slope\"]\nif callback_context.triggered_id == \"upload\":\n_, content_string = contents.split(\",\")\ndecoded = base64.b64decode(content_string)\nif \"zip\" in filename:\nwith zipfile.ZipFile(io.BytesIO(decoded)) as z:\ntrials = pd.read_csv(z.open(\"trials.csv\"))\nelse:\ntrials = pd.read_csv(io.StringIO(decoded.decode(\"utf-8\")))\nelse:\npoints_ix = pd.Index(\nnp.linspace(min_x, max_x, n_params[\"n_levels\"]),\nname=\"Intensity\",\n)\nall_trials = {}\nfor i in range(n_params[\"n_blocks\"]):\nexecution_plan = pd.Index(\n[random.choice(points_ix) for _ in range(n_params[\"n_trials\"])],\nname=\"Intensity\",\n)\ntrials_i = pd.Series(\n[\nint(\nrandom.random()\n&lt; expit(x * params[\"slope\"] + params[\"intercept\"]),\n)\nfor x in execution_plan\n],\nname=\"Result\",\nindex=execution_plan,\n)\nall_trials[i] = trials_i\ntrials = pd.concat(all_trials, names=[\"Block\"]).reset_index()\nreturn trials.to_dict(\"records\"), min_x, max_x\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.update_points_table","title":"<code>update_points_table(trials)</code>","text":"<p>Update points table.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"points-store\", \"data\"),\nInput(\"trials-store\", \"data\"),\n)\ndef update_points_table(trials: Records) -&gt; Records:\n\"\"\"Update points table.\"\"\"\ntrials_df = pd.DataFrame.from_records(trials)\ntrials_df[\"Intensity\"] = trials_df[\"Intensity\"].astype(float)\npoints = pa_points.from_trials(trials_df)\nreturn points.to_dict(\"records\")\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.update_blocks_table","title":"<code>update_blocks_table(trials)</code>","text":"<p>Update blocks table.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"blocks-table\", \"data\"),\nInput(\"trials-store\", \"data\"),\n)\ndef update_blocks_table(trials: Records) -&gt; Records:\n\"\"\"Update blocks table.\"\"\"\ntrials_df = pd.DataFrame.from_records(trials)\nblocks = trials_df.groupby(\"Block\").apply(pa_blocks.fit).reset_index()\nblocks[\"gamma\"] = 0.0\nblocks[\"lambda\"] = 0.0\nreturn blocks.to_dict(\"records\")\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.filter_points","title":"<code>filter_points(selected_rows, points)</code>","text":"<p>Filter points table.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"points-table\", \"data\"),\nInput(\"blocks-table\", \"derived_virtual_selected_rows\"),\nInput(\"points-store\", \"data\"),\n)\ndef filter_points(\nselected_rows: list[int],\npoints: Records,\n) -&gt; Records:\n\"\"\"Filter points table.\"\"\"\npoints_df = pd.DataFrame.from_records(points)\nreturn (\npoints_df[points_df[\"Block\"].isin(selected_rows)].to_dict(\"records\")\nif selected_rows\nelse points_df.to_dict(\"records\")\n)\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.update_fig","title":"<code>update_fig(param, points, blocks, selected_rows, min_x, max_x)</code>","text":"<p>Update plot and tables based on data store and selected view.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"plot\", \"figure\"),\nInput({\"type\": \"param\", \"name\": ALL}, \"value\"),\nInput(\"points-table\", \"data\"),\nInput(\"blocks-table\", \"data\"),\nInput(\"blocks-table\", \"derived_virtual_selected_rows\"),\nState({\"type\": \"x-param\", \"name\": \"min\"}, \"value\"),\nState({\"type\": \"x-param\", \"name\": \"max\"}, \"value\"),\n)\ndef update_fig(  # noqa: PLR0913\nparam: list[float],\npoints: Records,\nblocks: Records,\nselected_rows: list[int],\nmin_x: float,\nmax_x: float,\n) -&gt; go.Figure:\n\"\"\"Update plot and tables based on data store and selected view.\"\"\"\nparams = pd.Series(param, index=[\"x_0\", \"k\", \"gamma\", \"lambda\"])\nparams[\"intercept\"] = -params[\"x_0\"] / params[\"k\"]\nparams[\"slope\"] = 1 / params[\"k\"]\nblocks = [blocks[i] for i in selected_rows] + [\n{\"Block\": \"Model\"} | params.to_dict(),\n]\nx = pd.Index(\nnp.linspace(min_x, max_x, 100),\nname=\"Intensity\",\n)\nfits = pd.concat(\n{\nblock[\"Block\"]: pd.Series(\nexpit(x.to_numpy() * block[\"slope\"] + block[\"intercept\"]),\nname=\"Hit Rate\",\nindex=x,\n)\nfor block in blocks\n},\nnames=[\"Block\"],\n).reset_index()\nfits[\"Block\"] = fits[\"Block\"].astype(str)\npoints_df = pd.DataFrame.from_records(points)\npoints_df[\"Block\"] = points_df[\"Block\"].astype(str)\nfits_fig = px.line(\nfits,\nx=\"Intensity\",\ny=\"Hit Rate\",\ncolor=\"Block\",\n)\nresults_fig = px.scatter(\npoints_df,\nx=\"Intensity\",\ny=\"Hit Rate\",\nsize=\"n trials\",\ncolor=\"Block\",\ntemplate=\"plotly_white\",\n)\nreturn results_fig.add_traces(fits_fig.data)\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.export_image","title":"<code>export_image(export_clicked, fig)</code>","text":"<p>Export image.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"img-download\", \"data\"),\nInput({\"type\": \"img-export\", \"name\": ALL}, \"n_clicks\"),\nState(\"plot\", \"figure\"),\nprevent_initial_call=True,\n)\ndef export_image(\nexport_clicked: int,  # noqa: ARG001\nfig: go.Figure,\n) -&gt; dict[str, str | bool | bytes]:\n\"\"\"Export image.\"\"\"\nformat_suffix = callback_context.triggered_id[\"name\"]\nreturn {\n\"base64\": True,\n\"content\": base64.b64encode(\ngo.Figure(fig)\n.update_layout(showlegend=False)\n.to_image(format=format_suffix, width=500, height=500),\n).decode(\"utf-8\"),\n\"filename\": f\"fig.{format_suffix}\",\n}\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.export_data","title":"<code>export_data(export_clicked, points, blocks, trials)</code>","text":"<p>Export image.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"data-download\", \"data\"),\nInput({\"type\": \"data-export\", \"name\": ALL}, \"n_clicks\"),\nState(\"points-table\", \"data\"),\nState(\"blocks-table\", \"data\"),\nState(\"trials-store\", \"data\"),\nprevent_initial_call=True,\n)\ndef export_data(\nexport_clicked: int,  # noqa: ARG001\npoints: Records,\nblocks: Records,\ntrials: Records,\n) -&gt; dict[str, Any | None]:\n\"\"\"Export image.\"\"\"\nformat_suffix = callback_context.triggered_id[\"name\"]\npoints_df = pd.DataFrame.from_records(points)\nblocks_df = pd.DataFrame.from_records(blocks)\ntrials_df = pd.DataFrame.from_records(trials)\nif format_suffix == \"csv\":\nzip_buffer = io.BytesIO()\nwith zipfile.ZipFile(\nzip_buffer,\nmode=\"a\",\ncompression=zipfile.ZIP_DEFLATED,\nallowZip64=False,\n) as zip_file:\ndef write_file(df: pd.DataFrame, name: str) -&gt; None:\nbuffer = io.StringIO()\ndf.to_csv(buffer, index=False)\nzip_file.writestr(name, buffer.getvalue())\ndata = {\n\"points\": points_df,\n\"blocks\": blocks_df,\n\"trials\": trials_df,\n}\nfor level, points_df in data.items():\nwrite_file(points_df, f\"{level}.csv\")\nzip_buffer.seek(0)\nzip_bytes = zip_buffer.read()\nbase64_bytes = base64.b64encode(zip_bytes)\nbase64_string = base64_bytes.decode(\"utf-8\")\ntimestamp = datetime.now(tz=pytz.timezone(\"America/Chicago\")).strftime(\n\"%Y-%m-%d_%H%M\",\n)\ndownload = {\n\"base64\": True,\n\"content\": base64_string,\n\"filename\": f\"{timestamp}_psychoanalyze.zip\",\n}\nelif format_suffix == \"json\":\ndownload = dcc.send_data_frame(points_df.to_json, \"data.json\")\nelif format_suffix == \"parquet\":\ndownload = dcc.send_data_frame(points_df.to_parquet, \"data.parquet\")\nelif format_suffix == \"duckdb\":\nconnection = duckdb.connect(\"psychoanalyze.duckdb\")\nconnection.sql(\"CREATE TABLE points AS SELECT * FROM _data\")\nconnection.close()\nwith Path(\"psychoanalyze.duckdb\").open(\"rb\") as f:\ndownload = {\n\"base64\": True,\n\"content\": base64.b64encode(f.read()).decode(\"utf-8\"),\n\"filename\": f\"psychoanalyze.{format_suffix}\",\n}\nreturn download\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.toggle_eqn","title":"<code>toggle_eqn(n_clicks)</code>","text":"<p>Toggle equation.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"F-eqn\", \"is_open\"),\nOutput(\"show-eqn\", \"children\"),\nOutput(\"plot-equation\", \"children\"),\nInput(\"show-eqn\", \"n_clicks\"),\n)\ndef toggle_eqn(n_clicks: int) -&gt; tuple[bool, str, str]:\n\"\"\"Toggle equation.\"\"\"\nequation_abstracted = \"\"\"\n    $$\n\\\\psi(x) = \\\\gamma + (1 - \\\\gamma - \\\\lambda)F(x)\n    $$\n    \"\"\"\nif n_clicks:\nn_clicks_is_even = n_clicks % 2 == 0\nlabel = \"Show F(x) \u25be \" if n_clicks_is_even else \"Hide F(x) \u25b4 \"\nequation_expanded = \"\"\"\n        $$\n\\\\psi(x) = \\\\frac{\\\\gamma + (1 - \\\\gamma - \\\\lambda)}{1 + e^{-k(x - x_0)}}\n        $$\n        \"\"\"\nequation = equation_abstracted if n_clicks_is_even else equation_expanded\nreturn not n_clicks_is_even, label, equation\nreturn False, \"Show F(x) \u25be \", equation_abstracted\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.toggle_param","title":"<code>toggle_param(free)</code>","text":"<p>Toggle parameter.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput({\"type\": \"param\", \"name\": MATCH}, \"disabled\"),\nInput({\"type\": \"free\", \"name\": MATCH}, \"value\"),\nprevent_initial_call=True,\n)\ndef toggle_param(free: bool) -&gt; bool:  # noqa: FBT001\n\"\"\"Toggle parameter.\"\"\"\nreturn not free\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.set_params_to_preset","title":"<code>set_params_to_preset(preset, param)</code>","text":"<p>Set parameters to preset values.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput({\"type\": \"param\", \"name\": ALL}, \"value\"),\nInput(\"preset\", \"value\"),\nState({\"type\": \"param\", \"name\": ALL}, \"value\"),\nprevent_initial_call=True,\n)\ndef set_params_to_preset(\npreset: str,\nparam: list[float],\n) -&gt; list[float]:\n\"\"\"Set parameters to preset values.\"\"\"\npresets = {\n\"standard\": [0.0, 1.0, 0.0, 0.0],\n\"non-standard\": [10, 2, 0.2, 0.1],\n\"2AFC\": [0, 1, 0.5, 0.0],\n}\nreturn presets.get(preset, param)\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.set_fixed_params_to_preset","title":"<code>set_fixed_params_to_preset(preset, param)</code>","text":"<p>Set parameters to preset values.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput({\"type\": \"free\", \"name\": ALL}, \"value\"),\nInput(\"preset\", \"value\"),\nState({\"type\": \"free\", \"name\": ALL}, \"value\"),\nprevent_initial_call=True,\n)\ndef set_fixed_params_to_preset(\npreset: str,\nparam: list[bool],\n) -&gt; list[bool]:\n\"\"\"Set parameters to preset values.\"\"\"\npresets = {\n\"standard\": [True] * 4,\n\"non-standard\": [True] * 4,\n\"2AFC\": [True, True, False, True],\n}\nreturn presets.get(preset, param)\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.app.update_page_size","title":"<code>update_page_size(n_levels)</code>","text":"<p>Update page size.</p> Source code in <code>psychoanalyze/dashboard/app.py</code> <pre><code>@callback(\nOutput(\"points-table\", \"page_size\"),\nInput({\"type\": \"n-param\", \"name\": \"n-levels\"}, \"value\"),\n)\ndef update_page_size(n_levels: int) -&gt; int:\n\"\"\"Update page size.\"\"\"\nreturn n_levels\n</code></pre>"},{"location":"api/#psychoanalyze.dashboard.components","title":"<code>components</code>","text":"<p>Components for Dash dashboard.</p>"},{"location":"api/#psychoanalyze.dashboard.layout","title":"<code>layout</code>","text":"<p>Layout for Dash dashboard.</p>"},{"location":"api/#psychoanalyze.analysis","title":"<code>analysis</code>","text":"<p>Data structures and manipulation methods.</p>"},{"location":"api/#psychoanalyze.analysis.strength_duration","title":"<code>strength_duration</code>","text":"<p>Strength-duration analysis.</p> <p>Contains functions assessing the relationship between the amplitude and the time course of the stimulus.</p>"},{"location":"api/#psychoanalyze.analysis.strength_duration.from_blocks","title":"<code>from_blocks(blocks, dim)</code>","text":"<p>Calculate strength-duration measures from block data.</p> Source code in <code>psychoanalyze/analysis/strength_duration.py</code> <pre><code>def from_blocks(blocks: pd.DataFrame, dim: str) -&gt; pd.DataFrame:\n\"\"\"Calculate strength-duration measures from block data.\"\"\"\nif dim == \"Amp\":\nylabel = \"Threshold Amplitude (\u03bcA)\"\nxlabel = \"Fixed Pulse Width (\u03bcs)\"\nelif dim == \"Width\":\nylabel = \"Fixed Amplitude (\u03bcA)\"\nxlabel = \"Threshold Pulse Width (\u03bcs)\"\nblocks[ylabel] = blocks[\"Threshold\"]\nblocks[xlabel] = blocks[\"Fixed Magnitude\"]\nreturn blocks.drop(columns=[\"Threshold\", \"Fixed Magnitude\"])\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.strength_duration.plot","title":"<code>plot(blocks, dim, x_data, y_data)</code>","text":"<p>Plot strength-duration curve given detection data.</p> Source code in <code>psychoanalyze/analysis/strength_duration.py</code> <pre><code>def plot(\nblocks: pd.DataFrame,\ndim: str,\nx_data: list[float],\ny_data: list[float],\n) -&gt; go.Figure:\n\"\"\"Plot strength-duration curve given detection data.\"\"\"\ndef _get_labels_given_dim(\nlabels: dict[str, dict[str, str]],\ndim: str,\n) -&gt; dict[str, str]:\n\"\"\"Get appropriate axis labels for different choices of modulated dimension.\"\"\"\nreturn {\"x\": labels[dim][\"x\"], \"y\": labels[dim][\"y\"]}\nlabels_given_dim = _get_labels_given_dim(labels=labels, dim=dim)\nx = labels_given_dim[\"x\"]\ny = labels_given_dim[\"y\"]\nif blocks is not None:\nsd_df = blocks[blocks[\"Dimension\"] == dim]\nelse:\nsd_df = pd.DataFrame({x: x_data, y: y_data})\nreturn px.scatter(\nsd_df,\nx=x,\ny=y,\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.bayes","title":"<code>bayes</code>","text":"<p>Bayesian analysis of psychophysical data.</p>"},{"location":"api/#psychoanalyze.analysis.bayes.plot","title":"<code>plot(simulated, estimated)</code>","text":"<p>Plot Psychometric curve to emphasize Bayesian posteriors.</p> Source code in <code>psychoanalyze/analysis/bayes.py</code> <pre><code>def plot(simulated: pd.DataFrame, estimated: pd.Series) -&gt; go.Figure:\n\"\"\"Plot Psychometric curve to emphasize Bayesian posteriors.\"\"\"\ncombined = pd.concat(\n[simulated.reset_index(), estimated.reset_index()],\nkeys=[\"Simulated\", \"Estimated\"],\nnames=[\"Type\"],\n)\nreturn px.scatter(\ncombined.reset_index(),\nx=\"x\",\ny=\"Hit Rate\",\ncolor=\"Type\",\ntemplate=\"plotly_white\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.ecdf","title":"<code>ecdf</code>","text":"<p>Empirical Distribution Functions (eCDF).</p>"},{"location":"api/#psychoanalyze.analysis.ecdf.plot","title":"<code>plot(blocks, param)</code>","text":"<p>Plot empirical cumulative distrubtion function (eCDF) of fitted params.</p> Source code in <code>psychoanalyze/analysis/ecdf.py</code> <pre><code>def plot(blocks: pd.DataFrame, param: str) -&gt; go.Figure:\n\"\"\"Plot empirical cumulative distrubtion function (eCDF) of fitted params.\"\"\"\nreturn px.ecdf(\nblocks.reset_index(),\nx=param,\ncolor=blocks.get(\"Monkey\"),\n).update_layout(xaxis_title=param)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.weber","title":"<code>weber</code>","text":"<p>Test functions related to Weber's Law analysis.</p> <p>Contains functions assessing how discriminability of two stimuli relates to the baseline intensities of the stimuli according to Weber's Law.</p>"},{"location":"api/#psychoanalyze.analysis.weber.plot","title":"<code>plot(data, trendline='ols', error_y=None)</code>","text":"<p>Plot data according to Weber's Law.</p> Source code in <code>psychoanalyze/analysis/weber.py</code> <pre><code>def plot(\ndata: pd.DataFrame,\ntrendline: str = \"ols\",\nerror_y: str | None = None,\n) -&gt; go.Figure:\n\"\"\"Plot data according to Weber's Law.\"\"\"\n_trendline = \"ols\" if trendline else None\nreturn px.scatter(\ndata.reset_index(),\nx=\"Reference Charge (nC)\",\ny=\"Difference Threshold (nC)\",\nerror_y=\"err+\" if error_y == \"error bars\" else None,\nerror_y_minus=\"err-\" if error_y == \"error bars\" else None,\ncolor=\"Monkey\",\nsymbol=\"Dimension\",\ntrendline=_trendline,\ntemplate=\"plotly_white\",\nhover_data=[\"Date\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.weber.aggregate","title":"<code>aggregate(data)</code>","text":"<p>Calculate agg stats for Weber data.</p> Source code in <code>psychoanalyze/analysis/weber.py</code> <pre><code>def aggregate(data: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Calculate agg stats for Weber data.\"\"\"\nreturn (\ndata.groupby([\"Monkey\", \"Dimension\", \"Reference Charge (nC)\"])[\n\"Difference Threshold (nC)\"\n]\n.agg([\"mean\", \"count\", \"std\"])\n.rename(columns={\"mean\": \"Difference Threshold (nC)\"})\n)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.weber.load","title":"<code>load(path)</code>","text":"<p>Load weber file from a csv.</p> Source code in <code>psychoanalyze/analysis/weber.py</code> <pre><code>def load(path: Path) -&gt; pd.DataFrame:\n\"\"\"Load weber file from a csv.\"\"\"\nweber = pd.read_csv(path, parse_dates=[\"Date\"])\nweber[\"err+\"] = (\nweber[\"location_CI_5\"] * weber[\"Fixed_Param_Value\"] / 1000\n) - weber[\"Threshold_Charge_nC\"]\nweber[\"err-\"] = (\nweber[\"Threshold_Charge_nC\"]\n- (weber[\"location_CI_95\"]) * weber[\"Fixed_Param_Value\"] / 1000\n)\nreturn weber\n</code></pre>"},{"location":"dashboard/","title":"Dashboard","text":""},{"location":"dashboard/#introduction","title":"Introduction","text":"<p>Our dashboard is featured on our home page and is powered by Dash, a Python framework for building interactive data dashboards using the Flask web framework.</p> <p>While power users may be interested in examining or contributing to the code that powers the dashboard, use of the dashboard on our site requires no coding knowledge to use and aims to be of interest to people of all backgrounds.</p> <p>The dashboard is currently designed to be viewed on a full-sized laptop or desktop monitor and consists of 3 main components, 1 for each column in the interface:</p>"},{"location":"dashboard/#input-panel","title":"Input panel","text":""},{"location":"dashboard/#upload-data","title":"Upload data","text":"<p>The first component in the input panel column allows anyone to upload a dataset to be processed by the dashboard. The dataset must be a table either in <code>.csv</code> or <code>.parquet</code> format, and for now is restricted to be in the form of a very simple schema as follows:</p> Column Name Description DataType <code>Block</code> A number representing an ID for a consecutive \"block\" of trials determined by the researcher. <code>int</code> <code>Intensity</code> A number representing the intensity of the stimulus presented in a trial. <code>float</code> <code>Result</code> The binary outcome of the trial, encoded as a 0 for false and a 1 for true. <code>int</code> <p>Info</p> <p>The ability for the dashboard to process more complex schemas is a top priority on our roadmap. For more info or questions, visit the dedicated topic on GitHub Discussions where the community may suggest schemas they would like to see supported.</p>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#tests","title":"<code>tests</code>","text":"<p>Automated tests for <code>psychoanalyze</code>.</p> <p>Tests are documented for both users of and contributors to the package.</p> <ul> <li>Users should reference tests as examples for efficient utilization of the <code>psychoanalyze</code> package.</li> <li>Contributors should reference tests to assist in writing the required tests for accepted contributions.</li> </ul> <p>Generally, each test file corresponds to its corresponding submodule.</p>"},{"location":"tests/#tests.test_weber","title":"<code>test_weber</code>","text":"<p>Test psychoanalyze.weber functions.</p>"},{"location":"tests/#tests.test_weber.test_aggregate","title":"<code>test_aggregate()</code>","text":"<p>Makes sure that thresholds at a given stimulus intensity are aggregated.</p> Source code in <code>tests/test_weber.py</code> <pre><code>def test_aggregate() -&gt; None:\n\"\"\"Makes sure that thresholds at a given stimulus intensity are aggregated.\"\"\"\ncurve_data = pd.DataFrame.from_records(\n[\n{\"Reference Charge (nC)\": 0, \"Difference Threshold (nC)\": 0},\n{\"Reference Charge (nC)\": 0, \"Difference Threshold (nC)\": 2},\n],\nindex=pd.MultiIndex.from_frame(\npd.DataFrame({\"Monkey\": [\"U\", \"U\"], \"Dimension\": [\"Amp\", \"Amp\"]}),\n),\n)\nagg = weber.aggregate(curve_data)\nassert (\nagg.iloc[0, agg.columns.get_loc(\"Difference Threshold (nC)\")]\n== curve_data[\"Difference Threshold (nC)\"].mean()\n)\n</code></pre>"},{"location":"tests/#tests.test_weber.test_load","title":"<code>test_load(tmp_path)</code>","text":"<p>Given weber_curves.csv, loads dataframe.</p> Source code in <code>tests/test_weber.py</code> <pre><code>def test_load(tmp_path: Path) -&gt; None:\n\"\"\"Given weber_curves.csv, loads dataframe.\"\"\"\npd.DataFrame(\n{level_name: [] for level_name in types.block_index_levels}\n| {\n\"Reference Charge (nC)\": [],\n\"location_CI_5\": [],\n\"location_CI_95\": [],\n\"Fixed_Param_Value\": [],\n\"Threshold_Charge_nC\": [],\n},\n).to_csv(tmp_path / \"weber_curves.csv\", index_label=False)\nassert len(weber.load(tmp_path / \"weber_curves.csv\")) == 0\n</code></pre>"},{"location":"tests/#tests.test_points","title":"<code>test_points</code>","text":"<p>Tests for psychoanalyze.points module.</p>"},{"location":"tests/#tests.test_sessions","title":"<code>test_sessions</code>","text":"<p>Tests for psychoanalyze.sessions module.</p>"},{"location":"tests/#tests.test_sessions.subjects","title":"<code>subjects()</code>","text":"<p>Subjects for session-level data.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>@pytest.fixture()\ndef subjects() -&gt; pd.DataFrame:\n\"\"\"Subjects for session-level data.\"\"\"\nreturn pd.DataFrame({\"Monkey\": [\"U\"], \"Surgery Date\": [\"2020-01-01\"]})\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_generate_sessions","title":"<code>test_generate_sessions()</code>","text":"<p>Test appropriate number of sessions are generated.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_generate_sessions() -&gt; None:\n\"\"\"Test appropriate number of sessions are generated.\"\"\"\nassert sessions.generate(3) == [0, 1, 2]\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_from_trials_csv","title":"<code>test_from_trials_csv(tmp_path)</code>","text":"<p>Test loading trials from csv.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_from_trials_csv(tmp_path: Path) -&gt; None:\n\"\"\"Test loading trials from csv.\"\"\"\ncsv_dir = tmp_path / \"data\"\ncsv_dir.mkdir()\ncsv_path = csv_dir / \"trials.csv\"\ndata: dict[str, list[Any]] = {field: [] for field in [\"Monkey\", \"Date\"]}\ntrials = pd.DataFrame(data)\ntrials.to_csv(csv_path)\n_sessions = sessions.from_trials_csv(csv_path)\nassert set(_sessions.columns) == {\"Monkey\", \"Date\"}\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_day_marks_from_monkey_two_sessions","title":"<code>test_day_marks_from_monkey_two_sessions(subjects)</code>","text":"<p>Tests calculations of days from dates for multiple subjects.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_day_marks_from_monkey_two_sessions(subjects: pd.DataFrame) -&gt; None:\n\"\"\"Tests calculations of days from dates for multiple subjects.\"\"\"\n_sessions = pd.DataFrame(\n{\"Monkey\": [\"U\", \"U\"], \"Date\": [\"2020-01-02\", \"2020-01-03\"]},\n)\nassert sessions.day_marks(subjects, _sessions, \"U\") == {\n1: \"2020-01-02\",\n2: \"2020-01-03\",\n}\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_day_marks_from_monkey_one_session","title":"<code>test_day_marks_from_monkey_one_session(subjects)</code>","text":"<p>Tests calculations of days from dates for single subject.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_day_marks_from_monkey_one_session(subjects: pd.DataFrame) -&gt; None:\n\"\"\"Tests calculations of days from dates for single subject.\"\"\"\n_sessions = pd.DataFrame({\"Monkey\": [\"U\"], \"Date\": [\"2020-01-02\"]})\nassert sessions.day_marks(subjects, _sessions, \"U\") == {1: \"2020-01-02\"}\n</code></pre>"},{"location":"tests/#tests.test_blocks","title":"<code>test_blocks</code>","text":""},{"location":"tests/#tests.test_blocks.test_thresholds","title":"<code>test_thresholds()</code>","text":"<p>Tests threshold plot.</p> Source code in <code>tests/test_blocks.py</code> <pre><code>def test_thresholds() -&gt; None:\n\"\"\"Tests threshold plot.\"\"\"\ndata = pd.DataFrame(\n{\n\"Subject\": [\"A\", \"B\"],\n\"5%\": [1, 2],\n\"50%\": [1, 2],\n\"95%\": [1, 2],\n\"Block\": [1, 2],\n},\n)\nfig = blocks.plot_thresholds(data)\nsubjects = {trace[\"legendgroup\"] for trace in fig.data}\nassert subjects == {\"A\", \"B\"}\nassert fig.layout.xaxis.title.text == \"Block\"\nassert fig.layout.yaxis.title.text == \"50%\"\n</code></pre>"},{"location":"tests/#tests.test_bayes","title":"<code>test_bayes</code>","text":""},{"location":"tests/#tests.test_bayes.test_bayes","title":"<code>test_bayes()</code>","text":"<p>Test plotting bayesian representation of psi data.</p> Source code in <code>tests/test_bayes.py</code> <pre><code>def test_bayes():\n\"\"\"Test plotting bayesian representation of psi data.\"\"\"\nsimulated = pd.DataFrame(\n{\n\"x\": [-4, -2, 0, 2, 4],\n\"Hit Rate\": [0.01, 0.19, 0.55, 0.81, 0.99],\n},\n)\nindex = pd.Index([-4, -2, 0, 2, 4], name=\"Hit Rate\")\nestimated = pd.Series([0.011, 0.2, 0.56, 0.80, 0.98], index=index)\nfig = pa_bayes.plot(simulated, estimated)\nassert fig.layout.xaxis.title.text == \"x\"\nassert fig.layout.yaxis.title.text == \"Hit Rate\"\n</code></pre>"},{"location":"tests/#tests.test_data","title":"<code>test_data</code>","text":"<p>Test general-purpose data operations.</p>"},{"location":"tests/#tests.test_data.subjects","title":"<code>subjects()</code>","text":"<p>List of subject names.</p> Source code in <code>tests/test_data.py</code> <pre><code>@pytest.fixture()\ndef subjects() -&gt; list[str]:\n\"\"\"List of subject names.\"\"\"\nreturn [\"A\", \"B\"]\n</code></pre>"},{"location":"tests/#tests.test_strength_duration","title":"<code>test_strength_duration</code>","text":"<p>Tests for psychoanalyze.strength_duration module.</p>"},{"location":"tests/#tests.test_strength_duration.s_d_columns","title":"<code>s_d_columns()</code>","text":"<p>Columns needed for a strength-duration dataframe.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>@pytest.fixture()\ndef s_d_columns() -&gt; set:\n\"\"\"Columns needed for a strength-duration dataframe.\"\"\"\nreturn {\"Monkey\", \"Block\", \"Dimension\"}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_strength_duration","title":"<code>test_strength_duration()</code>","text":"<p>Test strength_duration construction.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_strength_duration() -&gt; None:\n\"\"\"Test strength_duration construction.\"\"\"\ndf_index = pd.MultiIndex.from_frame(\npd.DataFrame(\n{\"Monkey\": [], \"Block\": [], \"Dimension\": [], \"Fixed Magnitude\": []},\n),\n)\nblocks = pd.DataFrame({\"Threshold\": [], \"Fixed Magnitude\": []}, index=df_index)\ns_d = strength_duration.from_blocks(blocks=blocks, dim=\"Amp\")\nassert set(s_d.columns) == {\n\"Fixed Pulse Width (\u03bcs)\",\n\"Threshold Amplitude (\u03bcA)\",\n}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.s_d_empty_df","title":"<code>s_d_empty_df()</code>","text":"<p>Empty strength-duration dataframe.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>@pytest.fixture()\ndef s_d_empty_df() -&gt; pd.DataFrame:\n\"\"\"Empty strength-duration dataframe.\"\"\"\nreturn pd.DataFrame({\"Threshold\": [], \"Fixed Magnitude\": [], \"Dimension\": []})\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_strength_duration_amp","title":"<code>test_strength_duration_amp(s_d_columns, s_d_empty_df)</code>","text":"<p>Tests Strength-duration data for amplitude-modulated data.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_strength_duration_amp(s_d_columns: set, s_d_empty_df: pd.DataFrame) -&gt; None:\n\"\"\"Tests Strength-duration data for amplitude-modulated data.\"\"\"\nblocks = s_d_empty_df\ns_d = strength_duration.from_blocks(blocks=blocks, dim=\"Amp\")\nassert set(s_d.columns) &lt;= s_d_columns | {\n\"Threshold Amplitude (\u03bcA)\",\n\"Fixed Pulse Width (\u03bcs)\",\n}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_strength_duration_pw","title":"<code>test_strength_duration_pw(s_d_columns, s_d_empty_df)</code>","text":"<p>Test strength-duration calcs for pulse-width-modulated data.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_strength_duration_pw(s_d_columns: set, s_d_empty_df: pd.DataFrame) -&gt; None:\n\"\"\"Test strength-duration calcs for pulse-width-modulated data.\"\"\"\ns_d = strength_duration.from_blocks(\nblocks=s_d_empty_df,\ndim=\"Width\",\n)\nassert set(s_d.columns) &lt;= s_d_columns | {\n\"Fixed Amplitude (\u03bcA)\",\n\"Threshold Pulse Width (\u03bcs)\",\n}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_plot_with_data","title":"<code>test_plot_with_data()</code>","text":"<p>Test strenght-duration plot with data.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_plot_with_data():\n\"\"\"Test strenght-duration plot with data.\"\"\"\nx_data = [1.0]\ny_data = [1.0]\nfig = strength_duration.plot(\ndim=\"Width\",\nblocks=pd.DataFrame(\n{\n\"Dimension\": [],\n\"Fixed Amplitude (\u03bcA)\": [],\n\"Threshold Pulse Width (\u03bcs)\": [],\n},\n),\nx_data=x_data,\ny_data=y_data,\n)\nassert len(fig.data) == 1\n</code></pre>"},{"location":"tests/#tests.test_trials","title":"<code>test_trials</code>","text":"<p>Tests for psychoanalyze.points module.</p>"},{"location":"tests/#tests.test_trials.subjects","title":"<code>subjects()</code>","text":"<p>Subjects.</p> Source code in <code>tests/test_trials.py</code> <pre><code>@pytest.fixture()\ndef subjects() -&gt; list[str]:\n\"\"\"Subjects.\"\"\"\nreturn [\"A\", \"B\"]\n</code></pre>"},{"location":"tests/#tests.test_trials.x","title":"<code>x()</code>","text":"<p>Intensity values.</p> Source code in <code>tests/test_trials.py</code> <pre><code>@pytest.fixture()\ndef x() -&gt; list[int]:\n\"\"\"Intensity values.\"\"\"\nreturn list(range(8))\n</code></pre>"},{"location":"tests/#tests.test_trials.test_normalize","title":"<code>test_normalize()</code>","text":"<p>Given a denormalized dataframe, returns normalized data.</p> Source code in <code>tests/test_trials.py</code> <pre><code>def test_normalize() -&gt; None:\n\"\"\"Given a denormalized dataframe, returns normalized data.\"\"\"\nfields = {\n\"Session\": [\"Monkey\", \"Block\"],\n\"Reference Stimulus\": [\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"],\n\"Channel Configuration\": [\"Active Channels\", \"Return Channels\"],\n\"Test Stimulus\": [\"Amp1\", \"Width1\", \"Freq1\", \"Dur1\"],\n}\ndata: dict[str, list[Any]] = {\nfield: []\nfor field in fields[\"Session\"]\n+ fields[\"Reference Stimulus\"]\n+ fields[\"Channel Configuration\"]\n+ fields[\"Test Stimulus\"]\n}\n_trials = pd.DataFrame(data)\nnormalized_data = trials.normalize(_trials)\nassert normalized_data.keys() == {\n\"Session\",\n\"Reference Stimulus\",\n\"Channel Config\",\n\"Test Stimulus\",\n}\n</code></pre>"},{"location":"tests/#tests.test_trials.test_labels","title":"<code>test_labels()</code>","text":"<p>Given trial result integers, translates to labels.</p> Source code in <code>tests/test_trials.py</code> <pre><code>def test_labels() -&gt; None:\n\"\"\"Given trial result integers, translates to labels.\"\"\"\nassert trials.labels([0, 1]) == [\"Miss\", \"Hit\"]\n</code></pre>"},{"location":"tests/#tests.test_ecdf","title":"<code>test_ecdf</code>","text":""},{"location":"notebooks/","title":"Notebooks","text":"<p>Notebooks are IDE-type environments that allow you to interactively run Python code in the browser, and is a popular tool of choice for researchers and data scientists across many domains.</p> <p>Common notebook frameworks and environments include Jupyter, Quarto, and Google Colab.</p> <p>PsychoAnalyze provides a couple of notebook features that can be used to explore the package's functionality.</p>"},{"location":"notebooks/#tutorial-notebook","title":"Tutorial notebook","text":"<p>Check out our tutorial notebook to walk through a basic analysis workflow for a hypothetical yes/no experiment.</p> <ul> <li>Download the <code>.ipynb</code> file and the tutorial dataset.</li> <li>View the static version on GitHub.</li> </ul>"},{"location":"notebooks/#jupyterhub","title":"JupyterHub","text":"<p>We provide a ready-to-go, web-hosted notebook on our domain at https://nb.psychoanalyze.io, powered by JupyterHub. This is a great way to quickly start coding with the <code>psychoAnalyze</code> package, without needing to set up a development environment or install prerequisite software.</p>"},{"location":"notebooks/#submit-a-notebook","title":"Submit a notebook!","text":"<p>On our roadmap is a gallery of notebooks that demonstrate PsychoAnalyze's functionality. This is a great way for us to learn how people are using PsychoAnalyze, and for you to share your work with the community.</p> <p>Please consider submitting a notebook if you have found PsychoAnalyze useful in your research!</p>"}]}