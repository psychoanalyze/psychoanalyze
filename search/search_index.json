{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Interactive data exploration for psychophysics.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Try out the dashboard<ul> <li>Simulate data by adjusting model/simulation parameters</li> <li>Upload your own dataset according to the specified schema.</li> <li>Examine existing datasets using the dropdown menu</li> </ul> </li> <li>Use psychoanalyze as a Python package to develop your own analysis scripts.</li> </ul>"},{"location":"#installation","title":"Installation","text":"PoetryPip <pre><code>poetry add psychoanalyze\n</code></pre> <pre><code>pip install psychoanalyze\n</code></pre>"},{"location":"#why-psychoanalyze","title":"Why PsychoAnalyze?","text":"<p>PsychoAnalyze provides researchers with:</p> <ul> <li><code>psychoanalyze</code>, a Python package to assist with common data transformations and visualizations in psychophysics.</li> <li>psychoanalyze.io, a no-code dashboard for psychophysics data analysis and exploration.</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#psychoanalyze","title":"<code>psychoanalyze</code>","text":"<p>Top-level package for <code>psychoanalyze</code>.</p> <p>Modules:</p> <ul> <li><code>data</code>: Submodules in <code>psychoanalyze.data</code> contain data manipulation and transformation functions that relate to a level in the data hierarchy.</li> </ul>"},{"location":"api/#psychoanalyze.plot","title":"<code>plot</code>","text":"<p>Helper functions for common plot formats in psychophysics.</p> <p>Contains functions assisting with the plotting of all of the above modules</p>"},{"location":"api/#psychoanalyze.plot.thresholds","title":"<code>thresholds(blocks)</code>","text":"<p>Plot longitudinal threshold data.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def thresholds(blocks: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot longitudinal threshold data.\"\"\"\nreturn px.scatter(\ndata.transform_errors(blocks),\nx=\"Block\",\ny=\"50%\",\nerror_y=\"err+\",\nerror_y_minus=\"err-\",\ncolor=\"Subject\",\ncolor_discrete_map=colormap,\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.curves","title":"<code>curves(curve_data)</code>","text":"<p>Maybe duplicate of thresholds.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def curves(curve_data: dict[str, pd.DataFrame]) -&gt; go.Figure:\n\"\"\"Maybe duplicate of thresholds.\"\"\"\n_curves = curve_data[\"curves_df\"]\ny = _curves[\"p\"]\nreturn px.scatter(\n_curves.reset_index(),\nx=\"x\",\ny=y,\nerror_y=\"err+\",\nerror_y_minus=\"err-\",\ncolor=_curves.get(\"Subject\"),  # or df[\"Type\"],\ncolor_discrete_map=colormap,\nsymbol=_curves.get(\"Block\"),\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.logistic","title":"<code>logistic(points)</code>","text":"<p>Plot a logistic curve.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def logistic(points: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot a logistic curve.\"\"\"\nreturn px.line(\npoints.reset_index(),\nx=\"x\",\ny=\"Hit Rate\",\ncolor=points.get(\"Type\"),\ntemplate=\"plotly_white\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.bayes","title":"<code>bayes(simulated, estimated)</code>","text":"<p>Plot Psychometric curve to emphasize Bayesian posteriors.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def bayes(simulated: pd.DataFrame, estimated: pd.Series) -&gt; go.Figure:\n\"\"\"Plot Psychometric curve to emphasize Bayesian posteriors.\"\"\"\ncombined = pd.concat(\n[simulated.reset_index(), estimated.reset_index()],\nkeys=[\"Simulated\", \"Estimated\"],\nnames=[\"Type\"],\n)\nreturn px.scatter(\ncombined.reset_index(),\nx=\"x\",\ny=\"Hit Rate\",\ncolor=\"Type\",\ntemplate=\"plotly_white\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.hits_animation","title":"<code>hits_animation(cumulative_draws)</code>","text":"<p>Plot raw hit count as animation.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def hits_animation(cumulative_draws: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot raw hit count as animation.\"\"\"\nreturn px.bar(\ncumulative_draws.reset_index(),\nx=\"x\",\ny=\"Hits\",\nanimation_group=\"x\",\nanimation_frame=\"n\",\nrange_y=(0, max(cumulative_draws[\"Hits\"])),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.psi","title":"<code>psi(points)</code>","text":"<p>Plot a psychometric function.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def psi(points: pd.Series) -&gt; go.Figure:\n\"\"\"Plot a psychometric function.\"\"\"\nreturn px.scatter(\npoints.reset_index(),\nx=\"Intensity\",\ny=\"Hit Rate\",\ntemplate=\"plotly_white\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.psi_animation","title":"<code>psi_animation(df)</code>","text":"<p>Plot animation for psychometric plot as n trials grows.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def psi_animation(df: DataFrame[PsiAnimation]) -&gt; go.Figure:\n\"\"\"Plot animation for psychometric plot as n trials grows.\"\"\"\nreturn px.line(\ndf,\nx=\"Intensity\",\ny=\"Hit Rate\",\nanimation_group=\"Intensity\",\nanimation_frame=\"Trial\",\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.posterior_animation","title":"<code>posterior_animation(cumulative_draws)</code>","text":"<p>Plot animation of posterior data as n grows.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def posterior_animation(cumulative_draws: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot animation of posterior data as n grows.\"\"\"\n_cumulative_draws = data.transform_errors(cumulative_draws).reset_index()\nreturn px.scatter(\n_cumulative_draws,\nx=\"x\",\ny=\"Hit Rate\",\nerror_y=\"err+\",\nerror_y_minus=\"err-\",\nanimation_group=\"x\",\nanimation_frame=\"n\",\ncolor=_cumulative_draws.get(\"Subject\"),\nsymbol=_cumulative_draws.get(\"Block\"),\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.difference_thresholds","title":"<code>difference_thresholds()</code>","text":"<p>Plot difference thresholds. Might be duplicate of weber.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def difference_thresholds() -&gt; go.Figure:\n\"\"\"Plot difference thresholds. Might be duplicate of weber.\"\"\"\nreturn px.scatter(\npd.DataFrame(\n{\n\"Reference Charge (nC)\": [10.0, 20.0, 30.0],\n\"Difference Threshold Charge (nC)\": [0.1, 0.2, 0.3],\n\"Monkey\": [\"U\", \"U\", \"U\"],\n\"Dimension\": [\"PW\", \"PW\", \"PW\"],\n\"n\": [10, 7, 9],\n},\n),\nx=\"Reference Charge (nC)\",\ny=\"Difference Threshold Charge (nC)\",\ncolor=\"Monkey\",\ncolor_discrete_map=colormap,\nsymbol=\"Dimension\",\nsize=\"n\",\ntrendline=\"ols\",\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.get_labels_given_dim","title":"<code>get_labels_given_dim(labels, dim)</code>","text":"<p>Get appropriate axis labels for different choices of modulated dimension.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def get_labels_given_dim(labels: dict[str, dict[str, str]], dim: str) -&gt; dict[str, str]:\n\"\"\"Get appropriate axis labels for different choices of modulated dimension.\"\"\"\nreturn {\"x\": labels[dim][\"x\"], \"y\": labels[dim][\"y\"]}\n</code></pre>"},{"location":"api/#psychoanalyze.plot.strength_duration","title":"<code>strength_duration(blocks, dim, x_data, y_data)</code>","text":"<p>Plot strength-duration curve given detection data.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def strength_duration(\nblocks: pd.DataFrame,\ndim: str,\nx_data: list[float],\ny_data: list[float],\n) -&gt; go.Figure:\n\"\"\"Plot strength-duration curve given detection data.\"\"\"\nlabels_given_dim = get_labels_given_dim(labels=labels, dim=dim)\nx = labels_given_dim[\"x\"]\ny = labels_given_dim[\"y\"]\nif blocks is not None:\nsd_df = blocks[blocks[\"Dimension\"] == dim]\nelse:\nsd_df = pd.DataFrame({x: x_data, y: y_data})\nreturn px.scatter(\nsd_df,\nx=x,\ny=y,\ntemplate=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.counts","title":"<code>counts(sessions, dim)</code>","text":"<p>Plot how many sessions are in the dataset.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def counts(sessions: pd.DataFrame, dim: str) -&gt; go.Figure:\n\"\"\"Plot how many sessions are in the dataset.\"\"\"\nif dim is not None:\nsessions[\"Dimension\"] = \"Amp\"\nsessions = sessions[sessions[\"Dimension\"] == dim]\nreturn px.histogram(\nsessions,\nx=\"Monkey\",\ncolor=\"Monkey\",\ntemplate=template,\n).update_layout(yaxis_title_text=\"# of Sessions\")\n</code></pre>"},{"location":"api/#psychoanalyze.plot.ecdf","title":"<code>ecdf(blocks, param)</code>","text":"<p>Plot empirical cumulative distrubtion function (eCDF) of fitted params.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def ecdf(blocks: pd.DataFrame, param: str) -&gt; go.Figure:\n\"\"\"Plot empirical cumulative distrubtion function (eCDF) of fitted params.\"\"\"\nreturn px.ecdf(\nblocks.reset_index(),\nx=param,\ncolor=blocks.get(\"Monkey\"),\n).update_layout(xaxis_title=param)\n</code></pre>"},{"location":"api/#psychoanalyze.plot.combine_figs","title":"<code>combine_figs(fig1, fig2)</code>","text":"<p>Combine two plotly scatter plots.</p> Source code in <code>psychoanalyze/plot.py</code> <pre><code>def combine_figs(fig1: go.Figure, fig2: go.Figure) -&gt; go.Figure:\n\"\"\"Combine two plotly scatter plots.\"\"\"\nreturn go.Figure(\ndata=fig1.data + fig2.data,\nlayout_xaxis_title_text=\"Stimulus Magnitude\",\nlayout_yaxis_title_text=\"Hit Rate\",\nlayout_template=template,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids","title":"<code>sigmoids</code>","text":"<p>Sigmoid functions used in the psychometric function.</p>"},{"location":"api/#psychoanalyze.sigmoids.weibull","title":"<code>weibull(x, alpha, beta)</code>","text":"<p>Calculate psi using Weibull function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def weibull(\nx: np.ndarray[Any, np.dtype[np.floating[Any]]],\nalpha: float,\nbeta: float,\n) -&gt; float:\n\"\"\"Calculate psi using Weibull function.\"\"\"\nreturn 1 - np.exp(-((x / alpha) ** beta))\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids.gumbel","title":"<code>gumbel(x, alpha, beta)</code>","text":"<p>Calculate psi using gumbel function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def gumbel(x: np.ndarray[Any, np.dtype[Any]], alpha: float, beta: float) -&gt; float:\n\"\"\"Calculate psi using gumbel function.\"\"\"\nreturn 1 - np.exp(-(10 ** (beta * (x - alpha))))\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids.quick","title":"<code>quick(x, alpha, beta)</code>","text":"<p>Calculate psi using quick function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def quick(x: float, alpha: float, beta: float) -&gt; float:\n\"\"\"Calculate psi using quick function.\"\"\"\nreturn 1 - 2 ** (-((x / alpha) ** beta))\n</code></pre>"},{"location":"api/#psychoanalyze.sigmoids.log_quick","title":"<code>log_quick(x, alpha, beta)</code>","text":"<p>Calculate psi using log_quick function.</p> Source code in <code>psychoanalyze/sigmoids.py</code> <pre><code>def log_quick(x: float, alpha: float, beta: float) -&gt; float:\n\"\"\"Calculate psi using log_quick function.\"\"\"\nreturn 1 - 2 ** (-(10 ** (beta * (x - alpha))))\n</code></pre>"},{"location":"api/#psychoanalyze.data","title":"<code>data</code>","text":"<p>Data objects and methods.</p> <p>The data module contains general-purpose data transformation and analysis functions that do not fit easily into one of its submodules.</p>"},{"location":"api/#psychoanalyze.data.generate_outcomes","title":"<code>generate_outcomes(n_trials_per_stim_level, index, threshold, scale)</code>","text":"<p>Generate outcomes.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def generate_outcomes(\nn_trials_per_stim_level: int,\nindex: pd.Index,\nthreshold: float,\nscale: float,\n) -&gt; pd.Series:\n\"\"\"Generate outcomes.\"\"\"\nrandom_number_generator = default_rng()\nreturn pd.Series(\nrandom_number_generator.binomial(\nn_trials_per_stim_level,\nscipy_logistic.cdf(index.get_level_values(\"x\"), threshold, scale),\nlen(index),\n),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.logistic","title":"<code>logistic(threshold=0.0, scale=1.0, gamma=0.0, lambda_=0.0)</code>","text":"<p>Generate logistic curves from parameters.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def logistic(\nthreshold: float = 0.0,\nscale: float = 1.0,\ngamma: float = 0.0,\nlambda_: float = 0.0,\n) -&gt; pd.Series:\n\"\"\"Generate logistic curves from parameters.\"\"\"\nx = linspace(scipy_logistic.ppf(0.01), scipy_logistic.ppf(0.99), 100)\nindex = pd.Index(x, name=\"x\")\nreturn pd.Series(\ngamma + (1 - gamma - lambda_) * scipy_logistic.cdf(x, threshold, scale),\nindex=index,\nname=\"Hit Rate\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.transform_errors","title":"<code>transform_errors(fit)</code>","text":"<p>Transform errors from absolute to relative.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def transform_errors(fit: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Transform errors from absolute to relative.\"\"\"\nfit[\"err+\"] = fit[\"95%\"] - fit[\"50%\"]\nfit[\"err-\"] = fit[\"50%\"] - fit[\"5%\"]\nreturn fit.drop(columns=[\"95%\", \"5%\"])\n</code></pre>"},{"location":"api/#psychoanalyze.data.reshape_fit_results","title":"<code>reshape_fit_results(fits, x, y)</code>","text":"<p>Reshape fit params for plotting.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def reshape_fit_results(fits: pd.DataFrame, x: pd.Index, y: str) -&gt; pd.DataFrame:\n\"\"\"Reshape fit params for plotting.\"\"\"\nrows = [f\"{y}[{i}]\" for i in range(1, len(x) + 1)]\nparam_fits = fits.loc[\nrows,  # row eg 'p[1]:p[8]'\n[\"5%\", \"50%\", \"95%\"],  # col\n]\nparam_fits = transform_errors(param_fits)\nparam_fits = param_fits.rename(columns={\"50%\": y})\nparam_fits.index = x\nreturn param_fits\n</code></pre>"},{"location":"api/#psychoanalyze.data.generate_animation_curves","title":"<code>generate_animation_curves()</code>","text":"<p>Generate animation data for curves.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def generate_animation_curves() -&gt; pd.DataFrame:\n\"\"\"Generate animation data for curves.\"\"\"\nn_blocks = 10\nn_trials_per_level_per_block = 10\nall_data = pd.concat(\nlist(\naccumulate(\n[\nblocks.generate(n_trials_per_level_per_block)\nfor _ in range(n_blocks)\n],\n),\n),\n)\nall_data[\"Hit Rate\"] = blocks.hit_rate\nreturn all_data\n</code></pre>"},{"location":"api/#psychoanalyze.data.load","title":"<code>load(data_dir=Path('data'))</code>","text":"<p>Load all tables into dict.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def load(\ndata_dir: Path = Path(\"data\"),\n) -&gt; dict[str, pd.DataFrame]:\n\"\"\"Load all tables into dict.\"\"\"\nreturn {\n\"Sessions\": sessions.load(data_dir),\n\"Subjects\": subjects.load(data_dir),\n\"Blocks\": blocks.load(data_dir),\n\"Points\": points.load(data_dir).to_frame(),\n}\n</code></pre>"},{"location":"api/#psychoanalyze.data.generate","title":"<code>generate()</code>","text":"<p>Generate data.</p> Source code in <code>psychoanalyze/data/__init__.py</code> <pre><code>def generate() -&gt; pd.DataFrame:\n\"\"\"Generate data.\"\"\"\nreturn pd.DataFrame(\n{\n\"Intensity\": [0.0],\n\"Hit Rate\": [0.5],\n},\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks","title":"<code>blocks</code>","text":"<p>Block-level data.</p> <p>Blocks are perhaps the most analytically significant objects in the hierarchy. They represent a specific set of experimental conditions and generally correspond to a single fit of the psychometric function.</p>"},{"location":"api/#psychoanalyze.data.blocks.Blocks","title":"<code>Blocks</code>","text":"<p>         Bases: <code>DataFrameModel</code></p> <p>Blocks type for Pandera.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>class Blocks(DataFrameModel):\n\"\"\"Blocks type for Pandera.\"\"\"\nslope: float\nthreshold: float\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.add_posterior","title":"<code>add_posterior(data, posterior)</code>","text":"<p>Combine observed and simulated data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def add_posterior(data: pd.Series, posterior: pd.Series) -&gt; pd.DataFrame:\n\"\"\"Combine observed and simulated data.\"\"\"\nreturn pd.concat(\n[data, posterior],\nkeys=[\"Observed\", \"Posterior\"],\nnames=[\"Type\"],\n).reset_index()\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.generate","title":"<code>generate(n_trials_per_level=100)</code>","text":"<p>Generate block-level data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def generate(n_trials_per_level: int = 100) -&gt; pd.DataFrame:\n\"\"\"Generate block-level data.\"\"\"\nindex = pd.Index(range(-3, 4), name=\"x\")\nn = [n_trials_per_level] * len(index)\np = logistic.cdf(index)\nreturn pd.DataFrame(\n{\"n\": n, \"Hits\": np.random.default_rng().binomial(n, p)},\nindex=index,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.hit_rate","title":"<code>hit_rate(df)</code>","text":"<p>Calculate hit rate from hits and number of trials.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def hit_rate(df: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate hit rate from hits and number of trials.\"\"\"\nreturn df[\"Hits\"] / df[\"n\"]\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.xrange_index","title":"<code>xrange_index(x_min, x_max, n_levels)</code>","text":"<p>Generate x range values from min and max.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def xrange_index(x_min: float, x_max: float, n_levels: int) -&gt; pd.Index:\n\"\"\"Generate x range values from min and max.\"\"\"\nreturn pd.Index(np.linspace(x_min, x_max, n_levels), name=\"x\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.transform","title":"<code>transform(hit_rate, y)</code>","text":"<p>Logit transform hit rate.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def transform(hit_rate: float, y: str) -&gt; float:\n\"\"\"Logit transform hit rate.\"\"\"\nreturn logit(hit_rate) if y == \"alpha\" else hit_rate\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.prep_psych_curve","title":"<code>prep_psych_curve(curves_data, x, y)</code>","text":"<p>Transform &amp; fit curve data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def prep_psych_curve(curves_data: pd.DataFrame, x: pd.Index, y: str) -&gt; pd.DataFrame:\n\"\"\"Transform &amp; fit curve data.\"\"\"\ncurves_data.index = x\nfits = points.fit(curves_data)\nreturn data.reshape_fit_results(fits, x, y)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.dimensions","title":"<code>dimensions(_points, dims)</code>","text":"<p>Calculate dimensions for multiple blocks.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def dimensions(_points: pd.DataFrame, dims: list[str]) -&gt; pd.Series:\n\"\"\"Calculate dimensions for multiple blocks.\"\"\"\nreturn _points.groupby(\n[dim for dim in list(_points.index.names) if dim not in dims],\n).apply(points.dimension)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.fits","title":"<code>fits(_points)</code>","text":"<p>Apply fits to multiple blocks.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def fits(_points: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Apply fits to multiple blocks.\"\"\"\nif len(_points):\nreturn _points.groupby(schemas.block_index_levels).apply(points.fit)\nreturn pd.DataFrame(\n{\"Threshold\": [], \"Fixed Magnitude\": [], \"Dimension\": []},\nindex=pd.MultiIndex.from_frame(\npd.DataFrame(\n{\n\"Subject\": [],\n\"Date\": [],\n\"Amp2\": [],\n\"Width2\": [],\n\"Freq2\": [],\n\"Dur2\": [],\n\"Active Channels\": [],\n\"Return Channels\": [],\n},\n),\n),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.empty","title":"<code>empty()</code>","text":"<p>Return empty block Series.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def empty() -&gt; pd.Series:\n\"\"\"Return empty block Series.\"\"\"\nreturn pd.Series(\n[],\nname=\"Hit Rate\",\nindex=pd.Index([], name=\"Amplitude (\u00b5A)\"),\ndtype=float,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.plot_fits","title":"<code>plot_fits(blocks)</code>","text":"<p>Plot fits.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def plot_fits(blocks: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot fits.\"\"\"\nx = np.linspace(-3, 3, 100)\ny = expit(x)\nreturn px.line(blocks.reset_index(), x=x, y=y)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.load_cached","title":"<code>load_cached(data_path)</code>","text":"<p>Load block data from csv.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def load_cached(data_path: Path) -&gt; pd.DataFrame:\n\"\"\"Load block data from csv.\"\"\"\nchannel_config = [\"Active Channels\", \"Return Channels\"]\nblocks = pd.read_csv(data_path / \"blocks.csv\", parse_dates=[\"Date\"]).set_index(\nsessions.dims + stimulus.ref_dims + channel_config,\n)\nblocks[\"Block\"] = days(blocks, subjects.load(data_path))\nreturn blocks\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.load","title":"<code>load(data_path=Path('data'))</code>","text":"<p>Load blocks data from csv.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def load(\ndata_path: Path = Path(\"data\"),\n) -&gt; pd.DataFrame:\n\"\"\"Load blocks data from csv.\"\"\"\nreturn load_cached(data_path / \"blocks.csv\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.days","title":"<code>days(blocks, intervention_dates)</code>","text":"<p>Calculate days for block-level data. Possible duplicate.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def days(blocks: pd.DataFrame, intervention_dates: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate days for block-level data. Possible duplicate.\"\"\"\nblocks = blocks.join(intervention_dates, on=\"Subject\")\ndays = pd.Series(\nblocks.index.get_level_values(\"Date\") - blocks[\"Surgery Date\"],\n).dt.days\ndays.name = \"Days\"\nreturn days\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.n_trials","title":"<code>n_trials(trials)</code>","text":"<p>Calculate n trials for each block.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def n_trials(trials: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate n trials for each block.\"\"\"\nsession_cols = [\"Subject\", \"Date\"]\nref_stim_cols = [\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"]\nchannel_config = [\"Active Channels\", \"Return Channels\"]\nreturn trials.groupby(session_cols + ref_stim_cols + channel_config)[\n\"Result\"\n].count()\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.experiment_type","title":"<code>experiment_type(blocks)</code>","text":"<p>Determine experimental type (detection/discrimination) from data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def experiment_type(blocks: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Determine experimental type (detection/discrimination) from data.\"\"\"\nref_stim = blocks.reset_index()[[\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"]]\nref_charge = ref_stim[\"Amp2\"] * ref_stim[\"Width2\"]\nblocks.loc[ref_charge == 0, \"Experiment Type\"] = \"Detection\"\nblocks.loc[ref_charge != 0, \"Experiment Type\"] = \"Discrimination\"\nreturn blocks[\"Experiment Type\"]\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.is_valid","title":"<code>is_valid(block)</code>","text":"<p>Determine if curve data is valid.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def is_valid(block: pd.DataFrame) -&gt; bool:\n\"\"\"Determine if curve data is valid.\"\"\"\nreturn any(block[\"Hit Rate\"] &gt; 0.5) &amp; any(block[\"Hit Rate\"] &lt; 0.5)  # noqa: PLR2004\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.subject_counts","title":"<code>subject_counts(data)</code>","text":"<p>Determine how many subjects are in the data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def subject_counts(data: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Determine how many subjects are in the data.\"\"\"\nsummary = (\ndata.index.get_level_values(\"Subject\").value_counts().rename(\"Total Blocks\")\n)\nsummary.index.name = \"Subject\"\nreturn summary\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.model_predictions","title":"<code>model_predictions(intensity_choices, k, x_0=0.0)</code>","text":"<p>Calculate psi for array of x values. Possible duplicate.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def model_predictions(\nintensity_choices: list[float],\nk: float,\nx_0: float = 0.0,\n) -&gt; pd.Series:\n\"\"\"Calculate psi for array of x values. Possible duplicate.\"\"\"\nreturn pd.Series(\n[1 / (1 + np.exp(-k * (x - x_0))) for x in intensity_choices],\nindex=intensity_choices,\nname=\"Hit Rate\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.make_predictions","title":"<code>make_predictions(fit, intensity_choices)</code>","text":"<p>Get psi value for array of x values.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def make_predictions(fit: pd.Series, intensity_choices: list[float]) -&gt; pd.Series:\n\"\"\"Get psi value for array of x values.\"\"\"\nreturn pd.Series(\nfit.predict_proba(pd.DataFrame({\"Intensity\": intensity_choices}))[:, 1],\nname=\"Hit Rate\",\nindex=pd.Index(intensity_choices, name=\"Intensity\"),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.get_fit","title":"<code>get_fit(trials)</code>","text":"<p>Get parameter fits for given trial data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def get_fit(trials: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Get parameter fits for given trial data.\"\"\"\nfit = LogisticRegression().fit(trials[[\"Intensity\"]], trials[\"Result\"])\nreturn pd.Series(\n{\n\"slope\": fit.coef_[0][0],\n\"intercept\": fit.intercept_[0],\n},\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.generate_trials","title":"<code>generate_trials(n_trials, model_params)</code>","text":"<p>Generate trials for block-level context.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def generate_trials(n_trials: int, model_params: dict[str, float]) -&gt; pd.DataFrame:\n\"\"\"Generate trials for block-level context.\"\"\"\nreturn trials.moc_sample(n_trials, model_params)\n</code></pre>"},{"location":"api/#psychoanalyze.data.blocks.from_points","title":"<code>from_points(points)</code>","text":"<p>Aggregate block measures from points data.</p> Source code in <code>psychoanalyze/data/blocks.py</code> <pre><code>def from_points(points: DataFrame[points.Points]) -&gt; pd.DataFrame:\n\"\"\"Aggregate block measures from points data.\"\"\"\nreturn points.groupby(\"BlockID\")[[\"n\"]].sum()\n</code></pre>"},{"location":"api/#psychoanalyze.data.points","title":"<code>points</code>","text":"<p>Utilities for points-level data.</p> <p>Points correspond to the aggregate measures of method-of-constant-stimuli experiments at each stimulus level measured. For example, a block that samples 8 stimulus intensity levels would have 8 corresponding points.</p>"},{"location":"api/#psychoanalyze.data.points.Points","title":"<code>Points</code>","text":"<p>         Bases: <code>pr.DataFrameModel</code></p> <p>Pandera data type.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>class Points(pr.DataFrameModel):\n\"\"\"Pandera data type.\"\"\"\nn: int\nHits: int\nblock_id: int\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.from_trials","title":"<code>from_trials(_trials)</code>","text":"<p>Aggregate point-level measures from trial data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def from_trials(_trials: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Aggregate point-level measures from trial data.\"\"\"\nreturn (\n_trials.groupby(\"Intensity\")[[\"Result\"]]\n.agg([\"count\", \"sum\"])\n.rename(columns={\"count\": \"n\", \"sum\": \"Hits\"})\n)[\"Result\"]\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.load","title":"<code>load(data_path)</code>","text":"<p>Load points data from csv.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def load(data_path: Path) -&gt; pd.Series:\n\"\"\"Load points data from csv.\"\"\"\n_trials = trials.load(data_path)\nreturn from_trials(_trials)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.dimension","title":"<code>dimension(points)</code>","text":"<p>Determine modulated dimension from point-level data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def dimension(points: pd.DataFrame) -&gt; str:\n\"\"\"Determine modulated dimension from point-level data.\"\"\"\namp1, width1 = (\npoints.index.get_level_values(param) for param in [\"Amp1\", \"Width1\"]\n)\nif amp1.nunique() &gt; 1 and width1.nunique() == 1:\nreturn \"Amp\"\nif width1.nunique() &gt; 1 and amp1.nunique() == 1:\nreturn \"Width\"\nif width1.nunique() &gt; 1 and amp1.nunique() &gt; 1:\nreturn \"Both\"\nreturn \"Neither\"\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.prep_fit","title":"<code>prep_fit(points, dimension='Amp1')</code>","text":"<p>Transform points data for numpy-related fitting procedures.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def prep_fit(points: pd.DataFrame, dimension: str = \"Amp1\") -&gt; dict:\n\"\"\"Transform points data for numpy-related fitting procedures.\"\"\"\npoints = points.reset_index()\nreturn {\n\"X\": len(points),\n\"x\": points[f\"{dimension}\"].to_numpy(),\n\"N\": points[\"n\"].to_numpy(),\n\"hits\": points[\"Hits\"].to_numpy(),\n}\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.model","title":"<code>model()</code>","text":"<p>Instantiate Stan binomial regression model.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def model() -&gt; stan.CmdStanModel:\n\"\"\"Instantiate Stan binomial regression model.\"\"\"\nreturn stan.CmdStanModel(stan_file=\"models/binomial_regression.stan\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.fit","title":"<code>fit(points, save_to=None, block=None)</code>","text":"<p>Fit psychometric curve to points.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def fit(\npoints: pd.DataFrame,\nsave_to: Path | None = None,\nblock: pd.DataFrame | None = None,\n) -&gt; pd.DataFrame:\n\"\"\"Fit psychometric curve to points.\"\"\"\npoints = points[[\"x\", \"Hits\", \"n\"]]\nif len(points):\ndata = points\n_fit = trials.fit(data)\n_fit = pd.DataFrame(\n{\n\"Threshold\": [_fit[\"Fit\"][0]],\n\"width\": [_fit[\"Fit\"][1]],\n\"gamma\": [_fit[\"Fit\"][2]],\n\"lambda\": [_fit[\"Fit\"][3]],\n\"err+\": [None],\n\"err-\": [None],\n},\nindex=pd.MultiIndex.from_tuples(\n[block],\nnames=[\n\"Monkey\",\n\"Date\",\n\"Amp2\",\n\"Width2\",\n\"Freq2\",\n\"Dur2\",\n\"Active Channels\",\n\"Return Channels\",\n],\n),\n)\nif save_to:\n_fit.to_csv(save_to)\nreturn _fit\nreturn pd.DataFrame(\n{\n\"Threshold\": [],\n\"width\": [],\n\"lambda\": [],\n\"gamma\": [],\n\"err+\": [],\n\"err-\": [],\n},\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.generate_series","title":"<code>generate_series(x, n, p)</code>","text":"<p>Generate points-level data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def generate_series(x: list[float], n: list[int], p: list[float]) -&gt; pd.Series:\n\"\"\"Generate points-level data.\"\"\"\nreturn pd.Series(\n[binom.rvs(n[i], p[i]) for i in range(len(x))],\nindex=pd.Index(x, name=\"Intensity\"),\nname=\"Hit Rate\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.generate_point","title":"<code>generate_point(n, p)</code>","text":"<p>Sample n hits from n trials and probability p from binomial dist.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def generate_point(n: int, p: float) -&gt; int:\n\"\"\"Sample n hits from n trials and probability p from binomial dist.\"\"\"\nreturn np.random.default_rng().binomial(n, p)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.datatable","title":"<code>datatable(data)</code>","text":"<p>Convert dataframe to Dash DataTable-friendly format.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def datatable(data: pd.DataFrame) -&gt; dash_table.DataTable:\n\"\"\"Convert dataframe to Dash DataTable-friendly format.\"\"\"\nreturn dash_table.DataTable(\ndata.reset_index()[[\"Amp1\", \"Hit Rate\", \"n\"]].to_dict(\"records\"),\ncolumns=[\n{\n\"id\": \"Amp1\",\n\"name\": \"Amp1\",\n\"type\": \"numeric\",\n\"format\": dash_table.Format.Format(\nprecision=2,\nscheme=dash_table.Format.Scheme.fixed,\n),\n},\n{\n\"id\": \"Hit Rate\",\n\"name\": \"Hit Rate\",\n\"type\": \"numeric\",\n\"format\": dash_table.Format.Format(\nprecision=2,\nscheme=dash_table.Format.Scheme.fixed,\n),\n},\n{\n\"id\": \"n\",\n\"name\": \"n\",\n\"type\": \"numeric\",\n},\n],\nid=\"experiment-psych-table\",\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.from_store","title":"<code>from_store(store_data)</code>","text":"<p>Get points-level measures from trials-level data store.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def from_store(store_data: str) -&gt; pd.DataFrame:\n\"\"\"Get points-level measures from trials-level data store.\"\"\"\n_trials = trials.from_store(store_data)\nreturn from_trials(_trials).to_frame()\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.combine_plots","title":"<code>combine_plots(fig1, fig2)</code>","text":"<p>Combine two points-level plots. Possible duplicate.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def combine_plots(fig1: go.Figure, fig2: go.Figure) -&gt; go.Figure:\n\"\"\"Combine two points-level plots. Possible duplicate.\"\"\"\nreturn go.Figure(data=fig1.data + fig2.data)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.n","title":"<code>n(trials)</code>","text":"<p>Count trials at each point.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def n(trials: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Count trials at each point.\"\"\"\nreturn trials.groupby(level=\"Block\").count()\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.to_block","title":"<code>to_block(points)</code>","text":"<p>Aggregate to block-level measures from points-level data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def to_block(points: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Aggregate to block-level measures from points-level data.\"\"\"\nreturn points.groupby(level=\"Block\").sum()\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.psi","title":"<code>psi(x, threshold, width, gamma, lambda_)</code>","text":"<p>Calculate psi for an array of intensity levels x.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def psi(\nx: np.ndarray,\nthreshold: float,\nwidth: float,\ngamma: float,\nlambda_: float,\n) -&gt; float:\n\"\"\"Calculate psi for an array of intensity levels x.\"\"\"\nreturn gamma + (1 - gamma - lambda_) / (\n1 + np.exp(-gamma * (x - threshold) / width) ** lambda_\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.points.plot","title":"<code>plot(points)</code>","text":"<p>Plot points data.</p> Source code in <code>psychoanalyze/data/points.py</code> <pre><code>def plot(points: pd.DataFrame) -&gt; go.Figure:\n\"\"\"Plot points data.\"\"\"\nreturn px.scatter(points.reset_index(), x=\"Intensity\", y=\"Hit Rate\")\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions","title":"<code>sessions</code>","text":"<p>Utilities for session-level data.</p> <p>Sessions represent a single day of experiments performed by a subject. It may contain several blocks.</p>"},{"location":"api/#psychoanalyze.data.sessions.generate","title":"<code>generate(n)</code>","text":"<p>Generate session-level data.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def generate(n: int) -&gt; list[int]:\n\"\"\"Generate session-level data.\"\"\"\nreturn list(range(n))\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.cache_results","title":"<code>cache_results(sessions)</code>","text":"<p>Save session data to csv.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def cache_results(sessions: pd.DataFrame) -&gt; None:\n\"\"\"Save session data to csv.\"\"\"\nsessions.to_csv(\"data/normalized/sessions.csv\", index=False)\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.from_trials_csv","title":"<code>from_trials_csv(path)</code>","text":"<p>Aggregate to session level from trial-level data.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def from_trials_csv(path: Path) -&gt; pd.DataFrame:\n\"\"\"Aggregate to session level from trial-level data.\"\"\"\nreturn pd.read_csv(path)[[\"Monkey\", \"Date\"]].drop_duplicates()\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.day_marks","title":"<code>day_marks(subjects, sessions, monkey)</code>","text":"<p>Calculate days since surgery date for a given subject.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def day_marks(subjects: pd.DataFrame, sessions: pd.DataFrame, monkey: str) -&gt; dict:\n\"\"\"Calculate days since surgery date for a given subject.\"\"\"\nsurgery_date = pd.to_datetime(\nsubjects.loc[subjects[\"Monkey\"] == monkey, \"Surgery Date\"],\n)[0]\nsessions = sessions[sessions[\"Monkey\"] == \"U\"]\nsessions[\"Days\"] = (pd.to_datetime(sessions[\"Date\"]) - surgery_date).dt.days\nreturn {sessions.loc[i, \"Days\"]: sessions.loc[i, \"Date\"] for i in sessions.index}\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.days","title":"<code>days(sessions, subjects)</code>","text":"<p>Calculate days since surgery date.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def days(sessions: pd.DataFrame, subjects: pd.DataFrame) -&gt; pd.Series:\n\"\"\"Calculate days since surgery date.\"\"\"\nsessions_subjects = sessions.join(subjects, on=\"Monkey\")\nreturn (\npd.to_datetime(sessions_subjects.index.get_level_values(\"Date\"))\n- sessions_subjects[\"Surgery Date\"]\n).dt.days\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.n_trials","title":"<code>n_trials(trials)</code>","text":"<p>Count trials per session.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def n_trials(trials: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Count trials per session.\"\"\"\nreturn trials.groupby([\"Monkey\", \"Date\"])[[\"Result\"]].count()\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.load","title":"<code>load(data_dir)</code>","text":"<p>Load session-level data from csv.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def load(data_dir: Path) -&gt; pd.DataFrame:\n\"\"\"Load session-level data from csv.\"\"\"\nreturn pd.read_csv(data_dir / \"sessions.csv\", index_col=[\"Monkey\", \"Date\"])\n</code></pre>"},{"location":"api/#psychoanalyze.data.sessions.generate_trials","title":"<code>generate_trials(n_trials, model_params, n_days)</code>","text":"<p>Generate trial-level data for session-level context.</p> Source code in <code>psychoanalyze/data/sessions.py</code> <pre><code>def generate_trials(\nn_trials: int,\nmodel_params: dict[str, float],\nn_days: int,\n) -&gt; pd.DataFrame:\n\"\"\"Generate trial-level data for session-level context.\"\"\"\nreturn pd.concat(\n{day: blocks.generate_trials(n_trials, model_params) for day in range(n_days)},\nnames=[\"Block\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.subjects","title":"<code>subjects</code>","text":"<p>Data transformation functions for subject-level data.</p>"},{"location":"api/#psychoanalyze.data.subjects.load","title":"<code>load(data_path)</code>","text":"<p>Load subject data from csv.</p> Source code in <code>psychoanalyze/data/subjects.py</code> <pre><code>def load(data_path: Path) -&gt; pd.DataFrame:\n\"\"\"Load subject data from csv.\"\"\"\nreturn pd.read_csv(\ndata_path / \"subjects.csv\",\nindex_col=\"Monkey\",\nparse_dates=[\"Surgery Date\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.subjects.generate_letter_names","title":"<code>generate_letter_names(n_subjects)</code>","text":"<p>Generate a list of dummy subjects using capital letters in alph. order.</p> Source code in <code>psychoanalyze/data/subjects.py</code> <pre><code>def generate_letter_names(n_subjects: int) -&gt; list[str]:\n\"\"\"Generate a list of dummy subjects using capital letters in alph. order.\"\"\"\nreturn list(\"ABCDEFG\"[:n_subjects])\n</code></pre>"},{"location":"api/#psychoanalyze.data.subjects.generate_trials","title":"<code>generate_trials(n_trials, model_params, n_days, n_subjects)</code>","text":"<p>Generate trial-level data, including subject-level info.</p> Source code in <code>psychoanalyze/data/subjects.py</code> <pre><code>def generate_trials(\nn_trials: int,\nmodel_params: dict[str, float],\nn_days: int,\nn_subjects: int,\n) -&gt; pd.DataFrame:\n\"\"\"Generate trial-level data, including subject-level info.\"\"\"\nreturn pd.concat(\n{\nsubj: sessions.generate_trials(n_trials, model_params, n_days)\nfor subj in string.ascii_uppercase[:n_subjects]\n},\nnames=[\"Subject\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.stimulus","title":"<code>stimulus</code>","text":"<p>Constants for dimension labels.</p>"},{"location":"api/#psychoanalyze.data.trials","title":"<code>trials</code>","text":"<p>Functions for data manipulations at the trial level.</p>"},{"location":"api/#psychoanalyze.data.trials.Trials","title":"<code>Trials</code>","text":"<p>         Bases: <code>DataFrameModel</code></p> <p>Trials data type for pandera + mypy type checking.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>class Trials(DataFrameModel):\n\"\"\"Trials data type for pandera + mypy type checking.\"\"\"\nresult: int\nintensity: Index[float]\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.generate","title":"<code>generate(n, options, outcomes)</code>","text":"<p>Generate n trials with outcomes.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def generate(n: int, options: list[float], outcomes: list[float]) -&gt; pd.DataFrame:\n\"\"\"Generate n trials with outcomes.\"\"\"\nreturn pd.DataFrame(\n{\n\"result\": pd.Series(\n[random.choice(outcomes) for _ in range(n)],\ndtype=int,\n),\n},\nindex=pd.Index(\n[random.choice(options) for _ in range(n)],\nname=\"intensity\",\ndtype=float,\n),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.load","title":"<code>load(data_path=Path('data'))</code>","text":"<p>Load trials data from csv.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def load(data_path: Path = Path(\"data\")) -&gt; pd.DataFrame:\n\"\"\"Load trials data from csv.\"\"\"\nreturn schemas.trials.validate(\npd.read_csv(\ndata_path / \"trials.csv\",\nindex_col=schemas.points_index_levels,\nparse_dates=[\"Date\"],\n),\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.from_store","title":"<code>from_store(store_data)</code>","text":"<p>Convert JSON-formatted string to DataFrame.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def from_store(store_data: str) -&gt; pd.DataFrame:\n\"\"\"Convert JSON-formatted string to DataFrame.\"\"\"\ndf_dict = json.loads(store_data)\nindex_names = df_dict.pop(\"index_names\")\nindex = pd.MultiIndex.from_tuples(df_dict[\"index\"])\ntrials = pd.DataFrame({\"Result\": df_dict[\"data\"][0]}, index=index)\ntrials.index.names = index_names\nreturn schemas.trials.validate(trials)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.to_store","title":"<code>to_store(trials)</code>","text":"<p>Convert data to a JSON-formatted string for dcc.Store.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def to_store(trials: pd.DataFrame) -&gt; str:\n\"\"\"Convert data to a JSON-formatted string for dcc.Store.\"\"\"\ndata_dict = trials.to_dict(orient=\"split\")\ndata_dict[\"index_names\"] = schemas.points_index_levels\nreturn json.dumps(data_dict)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.normalize","title":"<code>normalize(trials)</code>","text":"<p>Normalize denormalized trial data.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def normalize(trials: pd.DataFrame) -&gt; dict[str, pd.DataFrame]:\n\"\"\"Normalize denormalized trial data.\"\"\"\nreturn {\n\"Session\": trials[[\"Monkey\", \"Block\"]].drop_duplicates(),\n\"Reference Stimulus\": trials[[\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"]],\n\"Channel Config\": trials[[\"Active Channels\", \"Return Channels\"]],\n\"Test Stimulus\": trials[[\"Amp1\", \"Width1\", \"Freq1\", \"Dur1\"]],\n}\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.result","title":"<code>result(p)</code>","text":"<p>Return a trial result given a probability p.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def result(p: float) -&gt; bool:\n\"\"\"Return a trial result given a probability p.\"\"\"\nreturn random.random() &lt; p\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.results","title":"<code>results(n, p_x)</code>","text":"<p>Return a list of trial results in dict format.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def results(n: int, p_x: pd.Series) -&gt; list[Trial]:\n\"\"\"Return a list of trial results in dict format.\"\"\"\nresults = []\nfor _ in range(n):\nstimulus_magnitude = random.choice(p_x.index.to_list())\n_result = result(p_x[stimulus_magnitude])\nresults.append(\nTrial(\n{\n\"Stimulus Magnitude\": stimulus_magnitude,\n\"Result\": _result,\n},\n),\n)\nreturn results\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.labels","title":"<code>labels(results)</code>","text":"<p>Convert a list of outcome codes to their labels.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def labels(results: list[int]) -&gt; list[str]:\n\"\"\"Convert a list of outcome codes to their labels.\"\"\"\nreturn [codes[result] for result in results]\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.psi","title":"<code>psi(gamma, lambda_, k, intensity, x_0)</code>","text":"<p>Calculate the value of the psychometric function for a given intensity.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def psi(gamma: float, lambda_: float, k: float, intensity: float, x_0: float) -&gt; float:\n\"\"\"Calculate the value of the psychometric function for a given intensity.\"\"\"\nreturn gamma + (1 - gamma - lambda_) * (1 / (1 + np.exp(-k * (intensity - x_0))))\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.moc_sample","title":"<code>moc_sample(n_trials, model_params)</code>","text":"<p>Sample results from a method-of-constant-stimuli experiment.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def moc_sample(n_trials: int, model_params: dict[str, float]) -&gt; pd.DataFrame:\n\"\"\"Sample results from a method-of-constant-stimuli experiment.\"\"\"\nx_0 = model_params[\"x_0\"]\nk = model_params[\"k\"]\ngamma = model_params[\"gamma\"]\nlambda_ = model_params[\"lambda\"]\nintensity_choices = np.linspace(x_0 - 4 / k, x_0 + 4 / k, 7)\nintensities = [float(random.choice(intensity_choices)) for _ in range(n_trials)]\nintensity_index = pd.Index(intensities, name=\"Intensity\")\nresults = [\nint(random.random() &lt;= psi(gamma, lambda_, k, intensity, x_0))\nfor intensity in intensities\n]\nreturn pd.DataFrame(\n{\"Result\": pd.Series(results, dtype=int)},\nindex=intensity_index,\n)\n</code></pre>"},{"location":"api/#psychoanalyze.data.trials.fit","title":"<code>fit(trials)</code>","text":"<p>Fit trial data using logistic regression.</p> Source code in <code>psychoanalyze/data/trials.py</code> <pre><code>def fit(trials: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Fit trial data using logistic regression.\"\"\"\nreturn LogisticRegression().fit(trials[[\"Intensity\"]], trials[\"Result\"])\n</code></pre>"},{"location":"api/#psychoanalyze.data.schemas","title":"<code>schemas</code>","text":"<p>Pandera schemas for psychoanalyze dataframes.</p> <p>Contains data table schemas of the hierarchical entities described above.</p>"},{"location":"api/#psychoanalyze.data.schemas.PsiAnimation","title":"<code>PsiAnimation</code>","text":"<p>         Bases: <code>DataFrameModel</code></p> <p>Pandera type for psychometric function animation dataset.</p> Source code in <code>psychoanalyze/data/schemas.py</code> <pre><code>class PsiAnimation(DataFrameModel):\n\"\"\"Pandera type for psychometric function animation dataset.\"\"\"\ntrial_id: Series[int]\nintensity: Series[float]\nhit_rate: Series[float]\n</code></pre>"},{"location":"api/#psychoanalyze.data.schemas.PsiAnimationFrame","title":"<code>PsiAnimationFrame</code>","text":"<p>         Bases: <code>DataFrameModel</code></p> <p>Pandera type for a single psychometric function animation frame.</p> Source code in <code>psychoanalyze/data/schemas.py</code> <pre><code>class PsiAnimationFrame(DataFrameModel):\n\"\"\"Pandera type for a single psychometric function animation frame.\"\"\"\nintensity: Series[float]\nhit_rate: Series[float]\n</code></pre>"},{"location":"api/#psychoanalyze.analysis","title":"<code>analysis</code>","text":"<p>Data structures and manipulation methods.</p>"},{"location":"api/#psychoanalyze.analysis.strength_duration","title":"<code>strength_duration</code>","text":"<p>Strength-duration analysis.</p> <p>Contains functions assessing the relationship between the amplitude and the time course of the stimulus.</p>"},{"location":"api/#psychoanalyze.analysis.strength_duration.from_blocks","title":"<code>from_blocks(blocks, dim)</code>","text":"<p>Calculate strength-duration measures from block data.</p> Source code in <code>psychoanalyze/analysis/strength_duration.py</code> <pre><code>def from_blocks(blocks: pd.DataFrame, dim: str) -&gt; pd.DataFrame:\n\"\"\"Calculate strength-duration measures from block data.\"\"\"\nif dim == \"Amp\":\nylabel = \"Threshold Amplitude (\u03bcA)\"\nxlabel = \"Fixed Pulse Width (\u03bcs)\"\nelif dim == \"Width\":\nylabel = \"Fixed Amplitude (\u03bcA)\"\nxlabel = \"Threshold Pulse Width (\u03bcs)\"\nblocks[ylabel] = blocks[\"Threshold\"]\nblocks[xlabel] = blocks[\"Fixed Magnitude\"]\nreturn blocks.drop(columns=[\"Threshold\", \"Fixed Magnitude\"])\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.weber","title":"<code>weber</code>","text":"<p>Test functions related to Weber's Law analysis.</p> <p>Contains functions assessing how discriminability of two stimuli relates to the baseline intensities of the stimuli according to Weber's Law.</p>"},{"location":"api/#psychoanalyze.analysis.weber.plot","title":"<code>plot(data, trendline='ols', error_y=None)</code>","text":"<p>Plot data according to Weber's Law.</p> Source code in <code>psychoanalyze/analysis/weber.py</code> <pre><code>def plot(\ndata: pd.DataFrame,\ntrendline: str = \"ols\",\nerror_y: str | None = None,\n) -&gt; go.Figure:\n\"\"\"Plot data according to Weber's Law.\"\"\"\n_trendline = \"ols\" if trendline else None\nreturn px.scatter(\ndata.reset_index(),\nx=\"Reference Charge (nC)\",\ny=\"Difference Threshold (nC)\",\nerror_y=\"err+\" if error_y == \"error bars\" else None,\nerror_y_minus=\"err-\" if error_y == \"error bars\" else None,\ncolor=\"Monkey\",\nsymbol=\"Dimension\",\ntrendline=_trendline,\ntemplate=\"plotly_white\",\nhover_data=[\"Date\"],\n)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.weber.aggregate","title":"<code>aggregate(data)</code>","text":"<p>Calculate agg stats for Weber data.</p> Source code in <code>psychoanalyze/analysis/weber.py</code> <pre><code>def aggregate(data: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Calculate agg stats for Weber data.\"\"\"\nreturn (\ndata.groupby([\"Monkey\", \"Dimension\", \"Reference Charge (nC)\"])[\n\"Difference Threshold (nC)\"\n]\n.agg([\"mean\", \"count\", \"std\"])\n.rename(columns={\"mean\": \"Difference Threshold (nC)\"})\n)\n</code></pre>"},{"location":"api/#psychoanalyze.analysis.weber.load","title":"<code>load(path)</code>","text":"<p>Load weber file from a csv.</p> Source code in <code>psychoanalyze/analysis/weber.py</code> <pre><code>def load(path: Path) -&gt; pd.DataFrame:\n\"\"\"Load weber file from a csv.\"\"\"\nweber = pd.read_csv(path, parse_dates=[\"Date\"])\nweber[\"err+\"] = (\nweber[\"location_CI_5\"] * weber[\"Fixed_Param_Value\"] / 1000\n) - weber[\"Threshold_Charge_nC\"]\nweber[\"err-\"] = (\nweber[\"Threshold_Charge_nC\"]\n- (weber[\"location_CI_95\"]) * weber[\"Fixed_Param_Value\"] / 1000\n)\nreturn weber\n</code></pre>"},{"location":"dashboard/","title":"Dashboard","text":""},{"location":"dashboard/#dashboard","title":"<code>dashboard</code>","text":"<p>The PsychoAnalyze dashboard is powered by Plotly/Dash.</p> <ul> <li> <p><code>app.py</code> is the main file which contains the infrastructure for the Dash app. and callback functions in their entirety.</p> </li> <li> <p><code>layout.py</code> specifies the layout of the HTML and Dash components that comprise the app.</p> </li> <li> <p><code>components.py</code> contains more complex and/or reusable components used in the app.</p> </li> </ul> <p>Copyright 2023 Tyler Schlichenmeyer</p> <p>This file is part of PsychoAnalyze. PsychoAnalyze is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>PsychoAnalyze is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU General Public License along with Foobar. If not, see https://www.gnu.org/licenses/.</p>"},{"location":"dashboard/#dashboard.app","title":"<code>app</code>","text":"<p>Main Dash app file.</p> <p>Copyright 2023 Tyler Schlichenmeyer</p> <p>This file is part of PsychoAnalyze. PsychoAnalyze is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>PsychoAnalyze is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU General Public License along with Foobar. If not, see https://www.gnu.org/licenses/.</p>"},{"location":"dashboard/#dashboard.app.update_data","title":"<code>update_data(n_trials_per_level, n_levels)</code>","text":"<p>Update generated data according to user parameter inputs.</p> Source code in <code>dashboard/app.py</code> <pre><code>@callback(\nOutput(\"plot\", \"figure\"),\nInput(\"n-trials-per-level\", \"value\"),\nInput(\"n-levels\", \"value\"),\n)\ndef update_data(n_trials_per_level: int, n_levels: int) -&gt; go.Figure:\n\"\"\"Update generated data according to user parameter inputs.\"\"\"\nx = list(np.linspace(-4, 4, n_levels))\n_points = points.generate_series(\nx=x,\nn=[n_trials_per_level] * n_levels,\np=expit(x),\n)\nreturn plot.psi(_points)\n</code></pre>"},{"location":"dashboard/#dashboard.components","title":"<code>components</code>","text":"<p>Components for Dash dashboard.</p> <p>Copyright 2023 Tyler Schlichenmeyer</p> <p>This file is part of PsychoAnalyze. PsychoAnalyze is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>PsychoAnalyze is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU General Public License along with Foobar. If not, see https://www.gnu.org/licenses/.</p>"},{"location":"dashboard/#dashboard.layout","title":"<code>layout</code>","text":"<p>Layout for Dash dashboard.</p> <p>Copyright 2023 Tyler Schlichenmeyer</p> <p>This file is part of PsychoAnalyze. PsychoAnalyze is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>PsychoAnalyze is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU General Public License along with Foobar. If not, see https://www.gnu.org/licenses/.</p>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#tests","title":"<code>tests</code>","text":"<p>Automated tests for <code>psychoanalyze</code>.</p> <p>Tests are documented for both users of and contributors to the package.</p> <ul> <li>Users should reference tests as examples for efficient utilization of the <code>psychoanalyze</code> package.</li> <li>Contributors should reference tests to assist in writing the required tests for accepted contributions.</li> </ul> <p>Generally, each test file corresponds to its corresponding submodule.</p>"},{"location":"tests/#tests.test_plot","title":"<code>test_plot</code>","text":"<p>Tests for psychoanalyze.plot module.</p>"},{"location":"tests/#tests.test_plot.test_thresholds","title":"<code>test_thresholds()</code>","text":"<p>Tests threshold plot.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_thresholds() -&gt; None:\n\"\"\"Tests threshold plot.\"\"\"\ndata = pd.DataFrame(\n{\n\"Subject\": [\"A\", \"B\"],\n\"5%\": [1, 2],\n\"50%\": [1, 2],\n\"95%\": [1, 2],\n\"Block\": [1, 2],\n},\n)\nfig = plot.thresholds(data)\nsubjects = {trace[\"legendgroup\"] for trace in fig.data}\nassert subjects == {\"A\", \"B\"}\nassert fig.layout.xaxis.title.text == \"Block\"\nassert fig.layout.yaxis.title.text == \"50%\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_standard_logistic","title":"<code>test_standard_logistic()</code>","text":"<p>Tests plotting the standard logistic function.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_standard_logistic() -&gt; None:\n\"\"\"Tests plotting the standard logistic function.\"\"\"\ns = data.logistic()\nlogistic = s.to_frame()\nlogistic[\"Type\"] = \"Generated\"\nfig = plot.logistic(logistic)\nassert fig.layout.xaxis.title.text == \"x\"\nassert fig.layout.yaxis.title.text == \"Hit Rate\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_combine_logistics","title":"<code>test_combine_logistics()</code>","text":"<p>Tests multiple logistic curves.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_combine_logistics() -&gt; None:\n\"\"\"Tests multiple logistic curves.\"\"\"\ns1 = data.logistic(threshold=0)\ns2 = data.logistic(threshold=1)\ns = [s1, s2]\ncombined = pd.concat(s, keys=[\"0\", \"1\"], names=[\"Type\"])\nassert len(plot.logistic(combined.reset_index()).data) == len(s)\n</code></pre>"},{"location":"tests/#tests.test_plot.test_bayes","title":"<code>test_bayes()</code>","text":"<p>Test plotting bayesian representation of psi data.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_bayes() -&gt; None:\n\"\"\"Test plotting bayesian representation of psi data.\"\"\"\nsimulated = pd.DataFrame(\n{\n\"x\": [-4, -2, 0, 2, 4],\n\"Hit Rate\": [0.01, 0.19, 0.55, 0.81, 0.99],\n},\n)\nindex = pd.Index([-4, -2, 0, 2, 4], name=\"Hit Rate\")\nestimated = pd.Series([0.011, 0.2, 0.56, 0.80, 0.98], index=index)\nfig = plot.bayes(simulated, estimated)\nassert fig.layout.xaxis.title.text == \"x\"\nassert fig.layout.yaxis.title.text == \"Hit Rate\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_curves","title":"<code>test_curves()</code>","text":"<p>Tests plotting curves.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_curves() -&gt; None:\n\"\"\"Tests plotting curves.\"\"\"\ncurves_data = {\n\"curves_df\": pd.DataFrame(\n{\"p\": [], \"err+\": [], \"err-\": []},\nindex=pd.Index([], name=\"x\"),\n),\n}\nassert plot.curves(curves_data)\n</code></pre>"},{"location":"tests/#tests.test_plot.test_strength_duration","title":"<code>test_strength_duration()</code>","text":"<p>Tests strength-duration plot.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_strength_duration() -&gt; None:\n\"\"\"Tests strength-duration plot.\"\"\"\nfig = plot.strength_duration(\ndim=\"Amp\",\nblocks=pd.DataFrame(\n{\n\"Dimension\": [],\n\"Fixed Amplitude (\u03bcA)\": [],\n\"Threshold Pulse Width (\u03bcs)\": [],\n\"Fixed Pulse Width (\u03bcs)\": [],\n\"Threshold Amplitude (\u03bcA)\": [],\n},\n),\nx_data=[],\ny_data=[],\n)\nassert fig.layout.xaxis.title.text == \"Fixed Pulse Width (\u03bcs)\"\nassert fig.layout.yaxis.title.text == \"Threshold Amplitude (\u03bcA)\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_strength_duration_with_data","title":"<code>test_strength_duration_with_data()</code>","text":"<p>Test strenght-duration plot with data.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_strength_duration_with_data() -&gt; None:\n\"\"\"Test strenght-duration plot with data.\"\"\"\nx_data = [1.0]\ny_data = [1.0]\nfig = plot.strength_duration(\ndim=\"Width\",\nblocks=pd.DataFrame(\n{\n\"Dimension\": [],\n\"Fixed Amplitude (\u03bcA)\": [],\n\"Threshold Pulse Width (\u03bcs)\": [],\n},\n),\nx_data=x_data,\ny_data=y_data,\n)\nassert len(fig.data) == 1\n</code></pre>"},{"location":"tests/#tests.test_plot.test_plot_counts","title":"<code>test_plot_counts()</code>","text":"<p>Test plot for session counts.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_plot_counts() -&gt; None:\n\"\"\"Test plot for session counts.\"\"\"\nsessions = pd.DataFrame(\n{\"Monkey\": [\"U\", \"U\"], \"Block\": [1, 2], \"Dimension\": [\"Amp\", \"Amp\"]},\n)\nfig = plot.counts(sessions, dim=\"Width\")\nassert fig.layout.yaxis.title.text == \"# of Sessions\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_plot_counts_dim_facet","title":"<code>test_plot_counts_dim_facet()</code>","text":"<p>Test facet plot for block counts.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_plot_counts_dim_facet() -&gt; None:\n\"\"\"Test facet plot for block counts.\"\"\"\nsessions = pd.DataFrame(\n{\"Monkey\": [\"U\", \"U\"], \"Block\": [1, 2], \"Dimension\": [\"Amp\", \"Width\"]},\n)\nfigs = plot.counts(sessions, dim=\"Amp\")\nassert len(figs.data)\n</code></pre>"},{"location":"tests/#tests.test_plot.test_ecdf_location_no_data","title":"<code>test_ecdf_location_no_data()</code>","text":"<p>Test ecdf location for no data.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_ecdf_location_no_data() -&gt; None:\n\"\"\"Test ecdf location for no data.\"\"\"\nblocks = pd.DataFrame({\"location\": []})\necdf_fig = plot.ecdf(blocks, \"location\")\nassert ecdf_fig.layout.xaxis.title.text == \"location\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_ecdf_width_no_data","title":"<code>test_ecdf_width_no_data()</code>","text":"<p>Test ecdf with no data.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_ecdf_width_no_data() -&gt; None:\n\"\"\"Test ecdf with no data.\"\"\"\nblocks = pd.DataFrame({\"width\": []})\necdf_fig = plot.ecdf(blocks, \"width\")\nassert ecdf_fig.layout.xaxis.title.text == \"width\"\n</code></pre>"},{"location":"tests/#tests.test_plot.test_combine_line_and_scatter","title":"<code>test_combine_line_and_scatter()</code>","text":"<p>Test combining line and scatter Plotly plots.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_combine_line_and_scatter() -&gt; None:\n\"\"\"Test combining line and scatter Plotly plots.\"\"\"\ndata1 = pd.DataFrame(\n{\"Stimulus Magnitude\": [0], \"Hit Rate\": [0.5]},\n)\ndata2 = pd.DataFrame({\"Stimulus Magnitude\": [0], \"Hit Rate\": [0.5]})\nfig1 = px.scatter(\ndata1,\nx=\"Stimulus Magnitude\",\ny=\"Hit Rate\",\n)\nfig2 = px.line(\ndata2,\nx=\"Stimulus Magnitude\",\ny=\"Hit Rate\",\n)\nfig = plot.combine_figs(fig1, fig2)\nassert fig.layout.xaxis.title.text == \"Stimulus Magnitude\"\nassert fig.layout.yaxis.title.text == \"Hit Rate\"\nassert len(fig.data) == len(data1) + len(data2)\n</code></pre>"},{"location":"tests/#tests.test_plot.test_psi","title":"<code>test_psi()</code>","text":"<p>Test psychometric function plot.</p> Source code in <code>tests/test_plot.py</code> <pre><code>def test_psi() -&gt; None:\n\"\"\"Test psychometric function plot.\"\"\"\nassert plot.psi(\npd.Series([], name=\"Hit Rate\", index=pd.Index([], name=\"Intensity\")),\n)\n</code></pre>"},{"location":"tests/#tests.test_weber","title":"<code>test_weber</code>","text":"<p>Test psychoanalyze.weber functions.</p>"},{"location":"tests/#tests.test_weber.test_aggregate","title":"<code>test_aggregate()</code>","text":"<p>Makes sure that thresholds at a given stimulus intensity are aggregated.</p> Source code in <code>tests/test_weber.py</code> <pre><code>def test_aggregate() -&gt; None:\n\"\"\"Makes sure that thresholds at a given stimulus intensity are aggregated.\"\"\"\ncurve_data = pd.DataFrame.from_records(\n[\n{\"Reference Charge (nC)\": 0, \"Difference Threshold (nC)\": 0},\n{\"Reference Charge (nC)\": 0, \"Difference Threshold (nC)\": 2},\n],\nindex=pd.MultiIndex.from_frame(\npd.DataFrame({\"Monkey\": [\"U\", \"U\"], \"Dimension\": [\"Amp\", \"Amp\"]}),\n),\n)\nagg = weber.aggregate(curve_data)\nassert (\nagg.iloc[0, agg.columns.get_loc(\"Difference Threshold (nC)\")]\n== curve_data[\"Difference Threshold (nC)\"].mean()\n)\n</code></pre>"},{"location":"tests/#tests.test_weber.test_load","title":"<code>test_load(tmp_path)</code>","text":"<p>Given weber_curves.csv, loads dataframe.</p> Source code in <code>tests/test_weber.py</code> <pre><code>def test_load(tmp_path: Path) -&gt; None:\n\"\"\"Given weber_curves.csv, loads dataframe.\"\"\"\npd.DataFrame(\n{level_name: [] for level_name in schemas.block_index_levels}\n| {\n\"Reference Charge (nC)\": [],\n\"location_CI_5\": [],\n\"location_CI_95\": [],\n\"Fixed_Param_Value\": [],\n\"Threshold_Charge_nC\": [],\n},\n).to_csv(tmp_path / \"weber_curves.csv\", index_label=False)\nassert len(weber.load(tmp_path / \"weber_curves.csv\")) == 0\n</code></pre>"},{"location":"tests/#tests.test_points","title":"<code>test_points</code>","text":"<p>Tests for psychoanalyze.points module.</p>"},{"location":"tests/#tests.test_points.test_from_trials_sums_n_per_intensity_level","title":"<code>test_from_trials_sums_n_per_intensity_level()</code>","text":"<p>Might be same as aggregate function.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_from_trials_sums_n_per_intensity_level() -&gt; None:\n\"\"\"Might be same as aggregate function.\"\"\"\ntrials = pd.DataFrame(\n{\n\"Result\": [0, 0],\n},\nindex=pd.Index([0, 1], name=\"Intensity\"),\n)\n_points = points.from_trials(trials)\nassert all(\n_points[\"n\"]\n== pd.Series([1, 1], index=pd.Index([0, 1], name=\"Intensity\"), name=\"n\"),\n)\n</code></pre>"},{"location":"tests/#tests.test_points.test_amp_dimension","title":"<code>test_amp_dimension()</code>","text":"<p>Given points data, detect that it's amp-modulation data.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_amp_dimension() -&gt; None:\n\"\"\"Given points data, detect that it's amp-modulation data.\"\"\"\n_points = pd.DataFrame(\nindex=pd.MultiIndex.from_frame(\npd.DataFrame({\"Amp1\": [1, 2], \"Width1\": [1, 1]}),\n),\n)\nassert points.dimension(_points) == \"Amp\"\n</code></pre>"},{"location":"tests/#tests.test_points.test_width_dimension","title":"<code>test_width_dimension()</code>","text":"<p>Given points data, detect that it's pw-modulation data.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_width_dimension() -&gt; None:\n\"\"\"Given points data, detect that it's pw-modulation data.\"\"\"\n_points = pd.DataFrame(\nindex=pd.MultiIndex.from_frame(\npd.DataFrame({\"Amp1\": [1, 1], \"Width1\": [1, 2]}),\n),\n)\nassert points.dimension(_points) == \"Width\"\n</code></pre>"},{"location":"tests/#tests.test_points.test_both_dimensions","title":"<code>test_both_dimensions()</code>","text":"<p>Given points data, detect that it's amp-modulation data.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_both_dimensions() -&gt; None:\n\"\"\"Given points data, detect that it's amp-modulation data.\"\"\"\n_points = pd.DataFrame(\nindex=pd.MultiIndex.from_frame(\npd.DataFrame({\"Amp1\": [1, 2], \"Width1\": [1, 2]}),\n),\n)\nassert points.dimension(_points) == \"Both\"\n</code></pre>"},{"location":"tests/#tests.test_points.test_plot","title":"<code>test_plot()</code>","text":"<p>Test psi plot labels.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_plot() -&gt; None:\n\"\"\"Test psi plot labels.\"\"\"\n_points = pd.DataFrame(\n{\"Intensity\": [], \"Hit Rate\": []},\n)\nfig = points.plot(_points)\nassert fig.layout.yaxis.title.text == \"Hit Rate\"\nassert fig.layout.xaxis.title.text == \"Intensity\"\n</code></pre>"},{"location":"tests/#tests.test_points.test_generate","title":"<code>test_generate()</code>","text":"<p>Test generation of points data has right values and labels.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_generate() -&gt; None:\n\"\"\"Test generation of points data has right values and labels.\"\"\"\nx = list(np.linspace(-3, 3, 7))\nn = [10] * 7\np = expit(x)\n_points = points.generate_series(x, n, p)\nassert all(_points.index.to_numpy() == x)\nassert _points.name == \"Hit Rate\"\nassert _points.index.name == \"Intensity\"\n</code></pre>"},{"location":"tests/#tests.test_points.test_datatable","title":"<code>test_datatable()</code>","text":"<p>Test format of datatable from points data.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_datatable() -&gt; None:\n\"\"\"Test format of datatable from points data.\"\"\"\ndata = pd.DataFrame(\nindex=pd.MultiIndex.from_frame(\npd.DataFrame({\"Amp1\": [0.1212345], \"Hit Rate\": [0.1234543], \"n\": [1]}),\n),\n)\ndatatable = points.datatable(data)\namp_column = [column for column in datatable.columns if column[\"name\"] == \"Amp1\"]\nassert amp_column[0][\"format\"].to_plotly_json()[\"specifier\"] == \".2f\"\n</code></pre>"},{"location":"tests/#tests.test_points.test_combine_plots","title":"<code>test_combine_plots()</code>","text":"<p>Combines two plotly scatter plots into one figure.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_combine_plots() -&gt; None:\n\"\"\"Combines two plotly scatter plots into one figure.\"\"\"\ndata1 = pd.DataFrame({\"A\": [1]})\ndata2 = pd.DataFrame({\"B\": [1]})\nplot1 = px.scatter(data1)\nplot2 = px.line(data2)\nfig = points.combine_plots(plot1, plot2)\nassert len(fig.data) == len(data1) + len(data2)\n</code></pre>"},{"location":"tests/#tests.test_points.test_no_dimension","title":"<code>test_no_dimension()</code>","text":"<p>Given points data, detect that it's amp-modulation data.</p> Source code in <code>tests/test_points.py</code> <pre><code>def test_no_dimension() -&gt; None:\n\"\"\"Given points data, detect that it's amp-modulation data.\"\"\"\nsession_cols = [\"Monkey\", \"Date\"]\nref_stim_cols = [\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"]\nchannel_config = [\"Active Channels\", \"Return Channels\"]\ntest_stim_cols = [\"Amp1\", \"Width1\", \"Freq1\", \"Dur1\"]\n_points = pd.DataFrame(\n{\"n\": [], \"Hits\": []},\nindex=pd.MultiIndex.from_frame(\npd.DataFrame(\n{\nfield: []\nfor field in session_cols\n+ ref_stim_cols\n+ channel_config\n+ test_stim_cols\n},\n),\n),\n)\ndimension = points.dimension(_points)\nassert dimension == \"Neither\"\n</code></pre>"},{"location":"tests/#tests.test_sessions","title":"<code>test_sessions</code>","text":"<p>Tests for psychoanalyze.sessions module.</p>"},{"location":"tests/#tests.test_sessions.subjects","title":"<code>subjects()</code>","text":"<p>Subjects for session-level data.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>@pytest.fixture()\ndef subjects() -&gt; pd.DataFrame:\n\"\"\"Subjects for session-level data.\"\"\"\nreturn pd.DataFrame({\"Monkey\": [\"U\"], \"Surgery Date\": [\"2020-01-01\"]})\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_generate_sessions","title":"<code>test_generate_sessions()</code>","text":"<p>Test appropriate number of sessions are generated.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_generate_sessions() -&gt; None:\n\"\"\"Test appropriate number of sessions are generated.\"\"\"\nassert sessions.generate(3) == [0, 1, 2]\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_from_trials_csv","title":"<code>test_from_trials_csv(tmp_path)</code>","text":"<p>Test loading trials from csv.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_from_trials_csv(tmp_path: Path) -&gt; None:\n\"\"\"Test loading trials from csv.\"\"\"\ncsv_dir = tmp_path / \"data\"\ncsv_dir.mkdir()\ncsv_path = csv_dir / \"trials.csv\"\ndata: dict[str, list[Any]] = {field: [] for field in [\"Monkey\", \"Date\"]}\ntrials = pd.DataFrame(data)\ntrials.to_csv(csv_path)\n_sessions = sessions.from_trials_csv(csv_path)\nassert set(_sessions.columns) == {\"Monkey\", \"Date\"}\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_day_marks_from_monkey_two_sessions","title":"<code>test_day_marks_from_monkey_two_sessions(subjects)</code>","text":"<p>Tests calculations of days from dates for multiple subjects.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_day_marks_from_monkey_two_sessions(subjects: pd.DataFrame) -&gt; None:\n\"\"\"Tests calculations of days from dates for multiple subjects.\"\"\"\n_sessions = pd.DataFrame(\n{\"Monkey\": [\"U\", \"U\"], \"Date\": [\"2020-01-02\", \"2020-01-03\"]},\n)\nassert sessions.day_marks(subjects, _sessions, \"U\") == {\n1: \"2020-01-02\",\n2: \"2020-01-03\",\n}\n</code></pre>"},{"location":"tests/#tests.test_sessions.test_day_marks_from_monkey_one_session","title":"<code>test_day_marks_from_monkey_one_session(subjects)</code>","text":"<p>Tests calculations of days from dates for single subject.</p> Source code in <code>tests/test_sessions.py</code> <pre><code>def test_day_marks_from_monkey_one_session(subjects: pd.DataFrame) -&gt; None:\n\"\"\"Tests calculations of days from dates for single subject.\"\"\"\n_sessions = pd.DataFrame({\"Monkey\": [\"U\"], \"Date\": [\"2020-01-02\"]})\nassert sessions.day_marks(subjects, _sessions, \"U\") == {1: \"2020-01-02\"}\n</code></pre>"},{"location":"tests/#tests.test_data","title":"<code>test_data</code>","text":"<p>Test general-purpose data operations.</p>"},{"location":"tests/#tests.test_data.subjects","title":"<code>subjects()</code>","text":"<p>List of subject names.</p> Source code in <code>tests/test_data.py</code> <pre><code>@pytest.fixture()\ndef subjects() -&gt; list[str]:\n\"\"\"List of subject names.\"\"\"\nreturn [\"A\", \"B\"]\n</code></pre>"},{"location":"tests/#tests.test_data.test_nonstandard_logistic_mean","title":"<code>test_nonstandard_logistic_mean()</code>","text":"<p>Tests the y bounds of a nonstandard logistic.</p> Source code in <code>tests/test_data.py</code> <pre><code>def test_nonstandard_logistic_mean() -&gt; None:\n\"\"\"Tests the y bounds of a nonstandard logistic.\"\"\"\ns = data.logistic(threshold=1)\nassert min(s) &gt; 0\nassert max(s) &lt; 1\n</code></pre>"},{"location":"tests/#tests.test_data.test_nonstandard_logistic_slope","title":"<code>test_nonstandard_logistic_slope()</code>","text":"<p>Tests slope value for nonstandard logistic parameters.</p> Source code in <code>tests/test_data.py</code> <pre><code>def test_nonstandard_logistic_slope() -&gt; None:\n\"\"\"Tests slope value for nonstandard logistic parameters.\"\"\"\ns_control = data.logistic()\ns = data.logistic(scale=2)\nassert max(s) &lt; max(s_control)\n</code></pre>"},{"location":"tests/#tests.test_data.test_params","title":"<code>test_params()</code>","text":"<p>Test that params are in the right format.</p> Source code in <code>tests/test_data.py</code> <pre><code>def test_params() -&gt; None:\n\"\"\"Test that params are in the right format.\"\"\"\nx = pd.Index([])\nfits = pd.DataFrame({\"5%\": [], \"50%\": [], \"95%\": []})\nreshaped = data.reshape_fit_results(fits=fits, x=x, y=\"p\")\ndt.validate(reshaped.index, x)\nassert set(reshaped.columns) &lt;= {\"err+\", \"err-\", \"p\"}\n</code></pre>"},{"location":"tests/#tests.test_data.test_generate","title":"<code>test_generate()</code>","text":"<p>Test generation of complete data set.</p> Source code in <code>tests/test_data.py</code> <pre><code>def test_generate() -&gt; None:\n\"\"\"Test generation of complete data set.\"\"\"\nassert set(data.generate().columns) == {\"Intensity\", \"Hit Rate\"}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration","title":"<code>test_strength_duration</code>","text":"<p>Tests for psychoanalyze.strength_duration module.</p>"},{"location":"tests/#tests.test_strength_duration.s_d_columns","title":"<code>s_d_columns()</code>","text":"<p>Columns needed for a strength-duration dataframe.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>@pytest.fixture()\ndef s_d_columns() -&gt; set:\n\"\"\"Columns needed for a strength-duration dataframe.\"\"\"\nreturn {\"Monkey\", \"Block\", \"Dimension\"}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_strength_duration","title":"<code>test_strength_duration()</code>","text":"<p>Test strength_duration construction.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_strength_duration() -&gt; None:\n\"\"\"Test strength_duration construction.\"\"\"\ndf_index = pd.MultiIndex.from_frame(\npd.DataFrame(\n{\"Monkey\": [], \"Block\": [], \"Dimension\": [], \"Fixed Magnitude\": []},\n),\n)\nblocks = pd.DataFrame({\"Threshold\": [], \"Fixed Magnitude\": []}, index=df_index)\ns_d = strength_duration.from_blocks(blocks=blocks, dim=\"Amp\")\nassert set(s_d.columns) == {\n\"Fixed Pulse Width (\u03bcs)\",\n\"Threshold Amplitude (\u03bcA)\",\n}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.s_d_empty_df","title":"<code>s_d_empty_df()</code>","text":"<p>Empty strength-duration dataframe.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>@pytest.fixture()\ndef s_d_empty_df() -&gt; pd.DataFrame:\n\"\"\"Empty strength-duration dataframe.\"\"\"\nreturn pd.DataFrame({\"Threshold\": [], \"Fixed Magnitude\": [], \"Dimension\": []})\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_strength_duration_amp","title":"<code>test_strength_duration_amp(s_d_columns, s_d_empty_df)</code>","text":"<p>Tests Strength-duration data for amplitude-modulated data.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_strength_duration_amp(s_d_columns: set, s_d_empty_df: pd.DataFrame) -&gt; None:\n\"\"\"Tests Strength-duration data for amplitude-modulated data.\"\"\"\nblocks = s_d_empty_df\ns_d = strength_duration.from_blocks(blocks=blocks, dim=\"Amp\")\nassert set(s_d.columns) &lt;= s_d_columns | {\n\"Threshold Amplitude (\u03bcA)\",\n\"Fixed Pulse Width (\u03bcs)\",\n}\n</code></pre>"},{"location":"tests/#tests.test_strength_duration.test_strength_duration_pw","title":"<code>test_strength_duration_pw(s_d_columns, s_d_empty_df)</code>","text":"<p>Test strength-duration calcs for pulse-width-modulated data.</p> Source code in <code>tests/test_strength_duration.py</code> <pre><code>def test_strength_duration_pw(s_d_columns: set, s_d_empty_df: pd.DataFrame) -&gt; None:\n\"\"\"Test strength-duration calcs for pulse-width-modulated data.\"\"\"\ns_d = strength_duration.from_blocks(\nblocks=s_d_empty_df,\ndim=\"Width\",\n)\nassert set(s_d.columns) &lt;= s_d_columns | {\n\"Fixed Amplitude (\u03bcA)\",\n\"Threshold Pulse Width (\u03bcs)\",\n}\n</code></pre>"},{"location":"tests/#tests.test_trials","title":"<code>test_trials</code>","text":"<p>Tests for psychoanalyze.points module.</p>"},{"location":"tests/#tests.test_trials.subjects","title":"<code>subjects()</code>","text":"<p>Subjects.</p> Source code in <code>tests/test_trials.py</code> <pre><code>@pytest.fixture()\ndef subjects() -&gt; list[str]:\n\"\"\"Subjects.\"\"\"\nreturn [\"A\", \"B\"]\n</code></pre>"},{"location":"tests/#tests.test_trials.x","title":"<code>x()</code>","text":"<p>Intensity values.</p> Source code in <code>tests/test_trials.py</code> <pre><code>@pytest.fixture()\ndef x() -&gt; list[int]:\n\"\"\"Intensity values.\"\"\"\nreturn list(range(8))\n</code></pre>"},{"location":"tests/#tests.test_trials.test_normalize","title":"<code>test_normalize()</code>","text":"<p>Given a denormalized dataframe, returns normalized data.</p> Source code in <code>tests/test_trials.py</code> <pre><code>def test_normalize() -&gt; None:\n\"\"\"Given a denormalized dataframe, returns normalized data.\"\"\"\nfields = {\n\"Session\": [\"Monkey\", \"Block\"],\n\"Reference Stimulus\": [\"Amp2\", \"Width2\", \"Freq2\", \"Dur2\"],\n\"Channel Configuration\": [\"Active Channels\", \"Return Channels\"],\n\"Test Stimulus\": [\"Amp1\", \"Width1\", \"Freq1\", \"Dur1\"],\n}\ndata: dict[str, list[Any]] = {\nfield: []\nfor field in fields[\"Session\"]\n+ fields[\"Reference Stimulus\"]\n+ fields[\"Channel Configuration\"]\n+ fields[\"Test Stimulus\"]\n}\n_trials = pd.DataFrame(data)\nnormalized_data = trials.normalize(_trials)\nassert normalized_data.keys() == {\n\"Session\",\n\"Reference Stimulus\",\n\"Channel Config\",\n\"Test Stimulus\",\n}\n</code></pre>"},{"location":"tests/#tests.test_trials.test_labels","title":"<code>test_labels()</code>","text":"<p>Given trial result integers, translates to labels.</p> Source code in <code>tests/test_trials.py</code> <pre><code>def test_labels() -&gt; None:\n\"\"\"Given trial result integers, translates to labels.\"\"\"\nassert trials.labels([0, 1]) == [\"Miss\", \"Hit\"]\n</code></pre>"},{"location":"tooling/","title":"Tooling","text":"<p>Psychoanalyze uses</p> <ul> <li>Python 3.11</li> <li>Poetry for package and virtual environment management</li> <li>Pytest for automated testing</li> <li>MkDocs for documentation static site generation</li> <li>Heroku for dashboard deployment</li> </ul> <p>Dev Containers are the suggested way to set up a development environment. Running a dev container locally requires Docker Desktop on OSX and Windows.</p>"}]}